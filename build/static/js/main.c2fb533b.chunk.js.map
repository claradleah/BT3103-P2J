{"version":3,"sources":["components/Navigation/NavBar.tsx","components/Form/Question.tsx","components/Navigation/SliderMenu.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["NavBar","Navbar","fixed","IconButton","style","color","onClick","props","handleMenu","fontSize","React","Component","Question","handleAnswerChange","newValue","question","answer","Container","className","Row","this","questionName","questionTitle","Col","questionTutorial","split","map","item","key","questionText","wrapEnabled","height","width","mode","theme","name","onChange","tabSize","editorProps","$blockScrolling","value","answerPlaceholder","Button","variant","size","prevQuestion","checkAnswer","nextQuestion","marginLeft","disabled","completed","lastQuestion","SliderMenu","listQuestions","questions","index","Grid","xs","handleClickQuestion","pageWrapId","outerContainerId","customBurgerIcon","isOpen","open","onStateChange","state","handleMenuStateChange","customCrossIcon","container","spacing","handleStart","Divider","backgroundColor","App","openMenu","returnedData","setState","i","handleNextQuestion","handlePrevQuestion","handleFinishCourse","length","handleCheckAnswer","doCrazyShit","fetch","method","headers","body","JSON","stringify","userToken","shown","0","editable","hidden","then","response","json","data","console","log","renderContent","marginTop","readOnly","fluid","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2fb533b.chunk.js","sourcesContent":["import IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/MenuRounded';\r\nimport React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\n\r\ntype MyProps = {\r\n    handleMenu: (arg0: boolean) => void,\r\n};\r\nclass NavBar extends React.Component<MyProps, {}> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Navbar fixed='top'>\r\n                <IconButton style={{ color: \"white\" }} onClick={() => this.props.handleMenu(true)}>\r\n                    <MenuIcon fontSize='large' />\r\n                </IconButton>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","import React from 'react';\r\nimport './Question.css';\r\nimport AceEditor from \"react-ace\";\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Container, Col, Row} from 'react-bootstrap';\r\n\r\n\r\ntype MyProps = {\r\n    lastQuestion: boolean,\r\n    question: {\r\n        questionName: string,\r\n        questionTitle: string,\r\n        questionTutorial: string,\r\n        questionText: string,\r\n        answer: string,\r\n        answerPlaceholder: string,\r\n        completed: boolean\r\n    },\r\n    nextQuestion: () => void,\r\n    prevQuestion: () => void,\r\n    checkAnswer: () => void,\r\n};\r\n\r\nclass Question extends React.Component<MyProps, {}> {\r\n\r\n    handleAnswerChange = (newValue: string) => {\r\n        this.props.question.answer = newValue;\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container className='d-flex align-items-center justify-content-center flex-column'>\r\n                <Row>\r\n                    <h3 className='question-title'>{this.props.question.questionName}: {this.props.question.questionTitle}</h3>\r\n                </Row>\r\n                <Row>\r\n                    <Col className='d-flex align-items-center justify-content-center'>\r\n                        <p>{this.props.question.questionTutorial.split('\\n').map(function (item, key) {\r\n                            return (\r\n                                <span key={key} className='question-font'>\r\n                            {item}\r\n                                    <br/>\r\n                        </span>)\r\n                        })}</p>\r\n                    </Col>\r\n                    <Col>\r\n                        <p className='question-font'><strong>{this.props.question.questionText}</strong></p>\r\n                        <AceEditor\r\n                            wrapEnabled\r\n                            height='50vh'\r\n                            width='100%'\r\n                            mode=\"javascript\"\r\n                            theme=\"monokai\"\r\n                            name=\"answerInput\"\r\n                            onChange={this.handleAnswerChange}\r\n                            tabSize={4}\r\n                            editorProps={{\r\n                                $blockScrolling: true,\r\n                            }}\r\n                            value={this.props.question.answerPlaceholder}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className='d-flex w-100'>\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                            onClick={this.props.prevQuestion}>\r\n                        PREVIOUS\r\n                    </Button>\r\n                    <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                            onClick={this.props.checkAnswer}>\r\n                        RUN\r\n                    </Button>\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                            onClick={this.props.nextQuestion} style={{marginLeft: 10}}\r\n                            disabled={!this.props.question.completed}>\r\n                        {this.props.lastQuestion ? \"SUBMIT\" : 'NEXT'}\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React from 'react';\r\nimport {push as Menu, State} from \"react-burger-menu\";\r\nimport './SliderMenu.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CircleIcon from '@material-ui/icons/Lens';\r\nimport CircleOutlineIcon from '@material-ui/icons/LensOutlined';\r\n\r\n\r\ntype MyProps = {\r\n    open: boolean,\r\n    question: number,\r\n    questions: {\r\n        questionName: string,\r\n        questionTitle: string,\r\n        questionTutorial: string,\r\n        questionText: string,\r\n        answer: string,\r\n        answerPlaceholder: string,\r\n        completed: boolean\r\n    }[],\r\n    handleMenu: (arg0: boolean) => void,\r\n    handleClickQuestion: (arg0: number) => void,\r\n    handleMenuStateChange: (arg0: State) => void,\r\n    handleStart: () => void,\r\n};\r\n\r\nclass SliderMenu extends React.Component<MyProps, {}> {\r\n\r\n    render() {\r\n\r\n        const listQuestions = this.props.questions.map((question, index) => {\r\n            if (index === 0 || index === 11) {\r\n                return ''\r\n            } else {\r\n                return (\r\n                    <Grid item xs={12} onClick={() => this.props.handleClickQuestion(index)} key={index} className='d-flex align-items-center'>\r\n                        {question.completed ? <CircleIcon style={{color:'green'}}/> : <CircleOutlineIcon style={{color:'red'}}/>}\r\n                        <span style={{marginLeft:10}}>\r\n                            {question.questionName}\r\n                        </span>\r\n                    </Grid>);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Menu pageWrapId={\"page-wrap\"} outerContainerId={\"root\"}\r\n                  customBurgerIcon={false} isOpen={this.props.open}\r\n                  onStateChange={(state) => this.props.handleMenuStateChange(state)}\r\n                  customCrossIcon={false} className='menu-width'\r\n            >\r\n                <Grid container spacing={3}\r\n                >\r\n                    <Grid item xs={12} className='d-flex align-items-center'>\r\n                        <IconButton className='closeButtonMenu ml-auto' onClick={() => this.props.handleMenu(false)}>\r\n                            <CloseIcon className='closeIconMenu'/>\r\n                        </IconButton>\r\n                    </Grid>\r\n                    {this.props.question === 0 ?\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                                <Button variant=\"outlined\" className='button-start' size='large'\r\n                                        onClick={this.props.handleStart}>\r\n                                    START\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Divider variant='middle' style={{backgroundColor: '#fff'}}/>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <span style={{color: 'white'}}>\r\n                                From Python to JS is a quick and easy online module will teach you JavaScript, the popular programming language used for the Web.\r\n                                </span>\r\n                            </Grid>\r\n                        </Grid>\r\n                        :\r\n                        <Grid container spacing={3}>\r\n                            {listQuestions}\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n            </Menu>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default SliderMenu;\r\n","import React, {Component} from 'react';\r\nimport Typist from 'react-typist';\r\nimport 'react-typist/dist/Typist.css';\r\nimport {Container, Col, Row} from 'react-bootstrap';\r\nimport NavBar from \"./components/Navigation/NavBar\";\r\nimport Question from \"./components/Form/Question\";\r\nimport SliderMenu from \"./components/Navigation/SliderMenu\";\r\nimport Button from '@material-ui/core/Button';\r\nimport AceEditor from 'react-ace';\r\n\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\n\r\n\r\nimport './App.css';\r\n\r\n\r\n// const questions = require('./questions.json');\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        openMenu: false,\r\n        question: 0,\r\n        returnedData: null,\r\n        questions: [\r\n            {\r\n                questionName: \"\",\r\n                questionTitle: \"\",\r\n                questionTutorial: \"\",\r\n                questionText: \"/*\\n Welcome to From Python to JS. \\n\\n This quick and easy online module will teach you JavaScript, the popular programming language used for the Web. \\n\\n JavaScript is a scripting or programming language that allows you to implement complex things on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, along with HTML and CSS .\\n*/\",\r\n                answer: \"\",\r\n                answerPlaceholder: \"\",\r\n                completed: false,\r\n            },\r\n            {\r\n                questionName: \"Task 1\",\r\n                questionTitle: \"Comments\",\r\n                questionTutorial: \"In JavaScipt, commenting can be done by using: \\n // For single line code \\n /* For multiline code */\",\r\n                questionText: \"Please convert the following to JavaScript syntax!\",\r\n                answer: \"\",\r\n                answerPlaceholder: \"# a one line comment\\n\" +\r\n                    \"\\n\" +\r\n                    \"'''\\n\" +\r\n                    \"this is a longer,\\n\" +\r\n                    \"multi-line comment\\n\" +\r\n                    \"'''\",\r\n                completed: false,\r\n            },\r\n            {\r\n                questionName: \"Task 2\",\r\n                questionTitle: \"Declarations\",\r\n                questionTutorial: \"In JavaScipt, There are three kinds of variable declarations in JS.\\n\" +\r\n                    \"var: Declares a variable, optionally initializing it to a value\\n\" +\r\n                    \"let: Declares a block-scoped, local variable, optionally initializing it to a value\\n\" +\r\n                    \"const: Declares a block-scoped, read-only named constant.\\n\",\r\n                questionText: \"Please convert the following to JavaScript syntax!\",\r\n                answer: \"\",\r\n                answerPlaceholder: \"x = 42\\n\" +\r\n                    \"y = 13\\n\" +\r\n                    \"x = \\\"forty-two\\\"\\n\" +\r\n                    \"z = \\\"The answer is\\\" + 42\\n\" +\r\n                    \"coffees = ['French Roast', 'Colombian', 'Kona']\",\r\n                completed: false,\r\n            },\r\n\r\n\r\n        ],\r\n    };\r\n\r\n    handleMenu = (isOpen: boolean) => {\r\n        this.setState({openMenu: isOpen})\r\n    };\r\n\r\n\r\n    handleClickQuestion = (i: number) => {\r\n        this.setState({\r\n            openMenu: false,\r\n            question: i\r\n        });\r\n    };\r\n\r\n    handleMenuStateChange = (state: any) => {\r\n        this.setState({openMenu: state.isOpen})\r\n    };\r\n\r\n    handleStart = () => {\r\n        this.setState({question: 1, openMenu: false,})\r\n    };\r\n\r\n    handleNextQuestion = () => {\r\n        this.setState({question: this.state.question + 1})\r\n    };\r\n\r\n    handlePrevQuestion = () => {\r\n        this.setState({question: this.state.question - 1})\r\n    };\r\n\r\n    handleFinishCourse = () => {\r\n        this.setState({question: this.state.questions.length - 1})\r\n    };\r\n\r\n    handleCheckAnswer = () => {\r\n        //Addin fetch nonsense\r\n        let questions = this.state.questions;\r\n        questions[this.state.question].completed = true;\r\n        this.setState({questions: questions})\r\n    };\r\n\r\n\r\n    doCrazyShit = () => {\r\n        const gatewayURL = \"https://cl8r4dbpqe.execute-api.us-east-1.amazonaws.com/Prod/\"\r\n        fetch(gatewayURL, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                userToken: \"abcde\",\r\n                shown: {\r\n                    0: \"\"\r\n                },\r\n                editable: {\r\n                    0: \"\"\r\n                },\r\n                hidden: {\r\n                    0: \"\"\r\n                }\r\n            })\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(data => {\r\n            console.log(data);\r\n            this.setState({returnedData: data});\r\n        })\r\n    };\r\n\r\n    renderContent = () => {\r\n        switch (this.state.question) {\r\n            case 0:\r\n                return (\r\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\r\n                        {/*{JSON.stringify(this.state.returnedData)}*/}\r\n                        <Typist className='title-font'>\r\n                            Learn how to script in JavaScript from Python!\r\n                        </Typist>\r\n                        <div className='d-flex align-items-center justify-content-center flex-column'\r\n                             style={{marginTop: '25px'}}>\r\n                            <AceEditor\r\n                                readOnly={false}\r\n                                wrapEnabled\r\n                                height='50vh'\r\n                                width='70vw'\r\n                                mode=\"javascript\"\r\n                                theme=\"monokai\"\r\n                                name=\"info-section\"\r\n                                tabSize={0}\r\n                                editorProps={{\r\n                                    $blockScrolling: true,\r\n                                }}\r\n                                value={this.state.questions[this.state.question].questionText}\r\n                            />\r\n                        </div>\r\n                        <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                                onClick={this.handleStart}>\r\n                            START\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            case this.state.questions.length:\r\n                return (\r\n                    <div>\r\n                        <h3>Congratulations on finishing the course</h3>\r\n                        <p>Please leave us a rating below</p>\r\n\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <Question question={this.state.questions[this.state.question]}\r\n                              nextQuestion={this.handleNextQuestion}\r\n                              prevQuestion={this.handlePrevQuestion}\r\n                              checkAnswer={this.handleCheckAnswer}\r\n                              lastQuestion={this.state.question === this.state.questions.length - 1}/>\r\n                );\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <SliderMenu open={this.state.openMenu} handleMenu={this.handleMenu}\r\n                            handleMenuStateChange={this.handleMenuStateChange}\r\n                            handleClickQuestion={this.handleClickQuestion}\r\n                            handleStart={this.handleStart}\r\n                            questions={this.state.questions}\r\n                            question={this.state.question}\r\n                />\r\n                <Container fluid className='container-main d-flex align-items-center justify-content-center'\r\n                           id='page-wrap'>\r\n                    <NavBar handleMenu={this.handleMenu}/>\r\n                    <Row className='d-flex align-items-center justify-content-center' style={{width: '80vw'}}>\r\n                        <Col xs={10}>\r\n                            {this.renderContent()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}