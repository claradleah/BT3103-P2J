{"version":3,"sources":["components/Form/Question.tsx","components/Navigation/SliderMenu.tsx","util/firebase.tsx","components/PastAnswers/PastAnswers.tsx","components/Question/QuestionInterface.tsx","QuestionList.tsx","components/Resume/Resume.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["QuestionType","SliderMenu","state","userId","handleUserIdChange","e","setState","target","value","handleSaveStateCheck","props","handleSaveState","handleResume","history","push","handleMenu","pageWrapId","outerContainerId","isOpen","this","open","onStateChange","handleMenuStateChange","className","question","questions","length","Grid","container","spacing","item","xs","Button","variant","size","onClick","handleStart","toggleAdmin","Divider","style","backgroundColor","color","href","rel","placeholder","onChange","handleLoadState","React","Component","withRouter","firebaseConfig","require","firebaseApp","firebase","Question","handleAnswerChange","newValue","answer","checkMCQAns","i","toggleComplete","checkCheckboxesAns","expected","Set","as","bs","a","has","eqSet","selected","handleCheckboxAnsChange","event","checked","add","delete","renderQuestion","type","EditableCode","renderEditableCode","MultipleChoice","renderMCQ","Checkboxes","renderCheckboxes","qn","questionText","options","key","Row","rows","text","Col","Container","fluid","lineHeight","questionTutorial","split","map","marginBottom","marginRight","OverlayTrigger","placement","overlay","Tooltip","id","hint","wrapEnabled","height","width","mode","theme","name","tabSize","editorProps","$blockScrolling","q","questionTitle","prevQuestion","isLoading","CircularProgress","checkAnswer","disabled","nextQuestion","marginLeft","completed","lastQuestion","PastAnswers","showAnswer","handlePastAnswerSelect","currQ","pastAnswers","lg","md","Paper","FormControl","Select","ans","index","MenuItem","pastAnswer","maxWidth","dangerouslySetInnerHTML","__html","errorMessage","QuestionInterface","showPastAnswers","handlePastAnswerSwitch","marginTop","readOnly","Box","component","mb","borderColor","Rating","feedbackRating","emptyIcon","fontSize","handleStartOver","handleNextQuestion","handlePrevQuestion","handleCheckAnswer","renderPastAnswers","renderContent","listQuestions","Tab","label","Tabs","v","handleClickQuestion","textColor","centered","TabIndicatorProps","display","showAlert","Alert","onClose","handleAlertClose","dismissible","FormGroup","row","FormControlLabel","control","Switch","labelPlacement","feedbackText","testCode","exportCode","Resume","handleFacebook","preventDefault","provider","FacebookAuthProvider","auth","signInWithPopup","then","result","user","uid","catch","error","console","log","handleGoogle","GoogleAuthProvider","textAlign","fontWeight","fullWidth","path","mdiFacebookBox","fill","mdiGoogle","App","openMenu","returnedData","showSnackBar","loggedIn","questionURL","axios","post","headers","Accept","res","data","isComplete","htmlFeedback","pass","currentQuestion","database","ref","update","once","snapshot","val","Object","values","err","prompt","forEach","onAuthStateChanged","currentuser","currentUser","username","displayName","exact","render","Snackbar","anchorOrigin","horizontal","vertical","autoHideDuration","message","action","IconButton","TransitionComponent","Slide","direction","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c069d03.chunk.js","sourcesContent":["import React from 'react';\nimport './Question.css';\nimport AceEditor from \"react-ace\";\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\nimport Button from \"@material-ui/core/Button\";\nimport { Container, Col, Row, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nexport interface QuestionIface {\n    questionTitle: string,\n    questionTutorial: string,\n    questionText: string | string[],\n    hint: string,\n    answer: string | number | number[],\n    feedbackText: string,\n    completed: boolean,\n    type: QuestionType,\n    testCode: string,\n    exportCode: string,\n    pastAnswers: pastAnswerIface[],\n}\n\nexport interface pastAnswerIface {\n    pass: boolean,\n    pastAnswer: string | number | number[],\n    errorMessage: string,\n}\n\nexport enum QuestionType {\n    EditableCode, // qn with editable code that can run\n    MultipleChoice, // mcq\n    Checkboxes // select all that applies\n}\n\ntype MyProps = {\n    lastQuestion: boolean,\n    isLoading: boolean,\n    index: number,\n    question: QuestionIface,\n    nextQuestion: () => void,\n    prevQuestion: () => void,\n    checkAnswer: () => void,\n    toggleComplete: (arg0: boolean) => void,\n};\n\nclass Question extends React.Component<MyProps, { selected: Set<number> }> {\n    constructor(props: MyProps) {\n        super(props);\n        this.state = { selected: new Set() };\n    }\n\n    handleAnswerChange = (newValue: string) => {\n        this.props.question.answer = newValue;\n    };\n\n    checkMCQAns = (i: number) => {\n        this.props.toggleComplete(i === (this.props.question.answer as number));\n    };\n\n    checkCheckboxesAns = () => {\n        const expected = new Set(this.props.question.answer as number[]);\n        this.props.toggleComplete(eqSet(expected, this.state.selected));\n    };\n\n    handleCheckboxAnsChange = (event: any, i: number) => {\n        let selected = this.state.selected;\n        if (event.target.checked) {\n            selected.add(i);\n        } else {\n            selected.delete(i);\n        }\n        this.setState({ selected: selected });\n    };\n\n    renderQuestion = () => {\n        switch (this.props.question.type) {\n            case QuestionType.EditableCode:\n                return this.renderEditableCode();\n            case QuestionType.MultipleChoice:\n                return this.renderMCQ();\n            case QuestionType.Checkboxes:\n                return this.renderCheckboxes();\n            default:\n                break;\n        }\n    };\n\n    renderCheckboxes = () => {\n        const qn = this.props.question.questionText as string[];\n        let options = [];\n        for (let i = 1; i < qn.length; i++) {\n            options.push(\n                <label key={i}>\n                    {qn[i]}\n                    <input type='checkbox' onChange={(e) => this.handleCheckboxAnsChange(e, i)} />\n                    <br />\n                </label>\n            )\n        }\n        return (\n            <Row className='w-100'>\n                <div><p className='question-instruction'><strong>{qn[0]}</strong></p></div>\n                <div>{options}</div>\n                <Button className='button-start' onClick={this.checkCheckboxesAns}> Check answer </Button>\n            </Row>\n        )\n    };\n\n    renderMCQ = () => {\n        const qn = this.props.question.questionText as string[];\n        let rows = [];\n        for (let i = 1; i < qn.length; i++) {\n            const text = qn[i]\n            rows.push(\n                <li onClick={() => this.checkMCQAns(i)}><span>{text}</span></li>\n            );\n        }\n        return (\n            <Row className='w-100'>\n                <p className='question-instruction'><strong>{qn[0]}</strong></p>\n                <ul>{rows}</ul>\n            </Row>\n        );\n    };\n\n    renderEditableCode = () => {\n        return (\n            <Row className='w-100'>\n                <Col>\n                    <Container fluid className='h-100'>\n                        <Row className='h-50'>\n                            <div style={{ lineHeight: 1 }}>\n                                <h6>Instructions:</h6>\n                                {this.props.question.questionTutorial.split('\\n').map(function (item, key) {\n                                    return (\n                                        <span key={key} className='question-font'>\n                                            {item}\n                                            <br />\n                                        </span>)\n                                })}\n                            </div>\n                        </Row>\n                        <Row className='d-flex flex-column h-50'>\n                            <h6>Output:</h6>\n                            <div className='output-box'>\n                                <p className='feedback-text-font'></p>\n                            </div>\n                        </Row>\n                    </Container>\n                </Col>\n                <Col>\n                    <div className='d-flex align-items-center ' style={{ marginBottom: 10 }}>\n                        <p className='question-instruction'><strong>{this.props.question.questionText}</strong></p>\n                        <div className='ml-auto' style={{ marginRight: 10 }}>\n                            <OverlayTrigger\n                                key='bottom'\n                                placement='bottom'\n                                overlay={\n                                    <Tooltip id='hint'>\n                                        {this.props.question.hint}\n                                    </Tooltip>\n                                }\n                            >\n                                <HelpIcon />\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                    <AceEditor\n                        wrapEnabled\n                        height='40vh'\n                        width='100%'\n                        mode=\"javascript\"\n                        theme=\"monokai\"\n                        name=\"answerInput\"\n                        onChange={this.handleAnswerChange}\n                        tabSize={4}\n                        editorProps={{\n                            $blockScrolling: true,\n                        }}\n                        value={this.props.question.answer as string}\n                    />\n                </Col>\n                {/*<div dangerouslySetInnerHTML={{ __html: this.props.question.feedbackText }} />*/}\n            </Row>\n        );\n    };\n\n    render() {\n        const q = this.props.question\n        return (\n            <Container className='d-flex align-items-center justify-content-center flex-column'>\n                <Row>\n                    <h3 className='question-title'>{q.questionTitle}</h3>\n                </Row>\n                {this.renderQuestion()}\n                <Row className='d-flex w-100'>\n                    <Button variant=\"outlined\" className='button-start' size='large'\n                        onClick={this.props.prevQuestion}>\n                        PREVIOUS\n                    </Button>\n                    {this.props.isLoading ?\n                        <CircularProgress className='loading-color ml-auto' />\n                        : <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                            onClick={this.props.checkAnswer}\n                            disabled={q.type !== QuestionType.EditableCode}>\n                            RUN\n                        </Button>}\n                    <Button variant=\"outlined\" className='button-start' size='large'\n                        onClick={this.props.nextQuestion} style={{ marginLeft: 10 }}\n                        disabled={!q.completed}\n                    >\n                        {this.props.lastQuestion ? \"Finish\" : 'NEXT'}\n                    </Button>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n// determines if 2 sets are equal. https://stackoverflow.com/a/31129384\nfunction eqSet(as: Set<any>, bs: Set<any>) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport default Question;\n\n","import Grid from \"@material-ui/core/Grid\";\nimport React from 'react';\nimport { push as Menu, State } from \"react-burger-menu\";\nimport './SliderMenu.css';\nimport Button from \"@material-ui/core/Button\";\nimport Divider from '@material-ui/core/Divider';\nimport { QuestionIface } from \"../Form/Question\";\nimport { withRouter } from 'react-router-dom';\nimport { RouteComponentProps } from \"react-router\";\n\ntype MyProps = RouteComponentProps & {\n    open: boolean,\n    question: number,\n    questions: QuestionIface[],\n    handleMenu: (arg0: boolean) => void,\n    handleClickQuestion: (arg0: number) => void,\n    handleMenuStateChange: (arg0: State) => void,\n    handleSaveState: (arg0: string) => void,\n    handleLoadState: (arg0: string) => void,\n    handleStart: () => void,\n    toggleAdmin: () => void,\n};\n\nclass SliderMenu extends React.Component<MyProps, {}> {\n\n    state = {\n        userId: ''\n    };\n\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ userId: e.target.value });\n    };\n\n    handleSaveStateCheck = () => {\n        if (this.state.userId !== '') {\n            this.props.handleSaveState(this.state.userId)\n        }\n    };\n\n    handleResume = () => {\n        this.props.history.push('/load');\n        this.props.handleMenu(false);\n    };\n\n    render() {\n\n        return (\n            <Menu pageWrapId={\"page-wrap\"} outerContainerId={\"root\"}\n                isOpen={this.props.open}\n                onStateChange={(state) => this.props.handleMenuStateChange(state)}\n                className='menu-width'\n            >\n                {this.props.question === 0 || this.props.question === (this.props.questions.length) ?\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                            <Button variant=\"outlined\" className='button-start' size='large'\n                                onClick={this.props.handleStart}>\n                                START\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n\n                            <Button variant=\"outlined\" className='button-start'\n                                onClick={this.handleResume}>\n                                RESUME\n                                </Button>\n\n                        </Grid>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                            <Button variant=\"outlined\" className='button-start'\n                                onClick={this.props.toggleAdmin}>\n                                ADMIN MODE</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                From Python to JS is a quick and easy online module will teach you JavaScript, the popular programming language used for the Web.\n                                </span>\n                        </Grid>\n                    </Grid>\n                    :\n                    <Grid container spacing={2} className='h-100'>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                Are you feeling lost? Need some help? Here are some resources to help you learn.\n                            </span>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                <a href='https://www.w3schools.com/js/' target='_blank' rel=\"noopener noreferrer\">01. W3 Schools</a>\n                            </span>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript' target='_blank' rel=\"noopener noreferrer\">02. MDN Web Documents</a>\n                            </span>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                Want to continue some other time? Simply key in a unique key and save!\n                            </span>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <label className=\"field a-field a-field_a3\">\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\n                                    onChange={this.handleUserIdChange}\n                                />\n                                <span className=\"a-field__label-wrap\">\n                                    <span className=\"a-field__label\">Enter User ID</span>\n                                </span>\n                            </label>\n                            <div className='d-flex'>\n                                <Button variant=\"outlined\" className='button-start' size='large'\n                                    onClick={this.handleSaveStateCheck}>\n                                    SAVE\n                                </Button>\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\n                                    LOAD\n                                </Button>\n                            </div>\n                        </Grid>\n                    </Grid>\n                }\n            </Menu>\n        )\n\n    }\n}\n\nexport default withRouter(SliderMenu);\n","import * as firebase from 'firebase';\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nvar firebaseConfig = require('./firebaseConfig.json');\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);","import React from 'react';\nimport { QuestionIface } from \"../Form/Question\";\nimport AceEditor from \"react-ace\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\nimport Paper from \"@material-ui/core/Paper\";\nimport { Row, Col, Container } from \"react-bootstrap\";\n\ntype MyProps = {\n    questions: QuestionIface[],\n    question: number,\n};\n\nclass PastAnswers extends React.Component<MyProps, {}> {\n\n    state = {\n        showAnswer: 0,\n    };\n\n    handlePastAnswerSelect = (e: any) => {\n        this.setState({ showAnswer: e.target.value })\n    };\n\n    render() {\n        const questions = this.props.questions;\n        const currQ = this.props.question;\n\n        if (!questions[currQ].pastAnswers || questions[currQ].pastAnswers.length === 0) {\n            return (<h6>You have not submitted any answer yet.</h6>)\n        }\n\n        return (\n            <Container fluid>\n                <Row>\n                    <Col lg=\"auto\" md=\"auto\">\n                        <Paper>\n                            <FormControl>\n                                <Select value={this.state.showAnswer} onChange={this.handlePastAnswerSelect}>\n                                    {questions[currQ].pastAnswers.map((ans, index) => {\n                                        return (\n                                            <MenuItem value={index}>{index + 1}. Attempt {index + 1}</MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </FormControl>\n                        </Paper>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <AceEditor\n                            wrapEnabled\n                            height='50vh'\n                            width='100%'\n                            mode=\"javascript\"\n                            theme=\"monokai\"\n                            name=\"info-section\"\n                            tabSize={0}\n                            editorProps={{\n                                $blockScrolling: true,\n                            }}\n                            value={questions[currQ].pastAnswers[this.state.showAnswer].pastAnswer as string}\n                            style={{ maxWidth: 570 }}\n                        />\n                    </Col>\n                    <Col lg={6} md={6}>\n                        <Paper>\n                            <div\n                                dangerouslySetInnerHTML={{ __html: questions[currQ].pastAnswers[this.state.showAnswer].errorMessage }} />\n                        </Paper>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default PastAnswers;\n\n","import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css';\nimport { Container, Col, Row, Alert } from 'react-bootstrap';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport { QuestionIface } from \"../Form/Question\";\nimport Question from \"../Form/Question\";\nimport PastAnswers from \"../PastAnswers/PastAnswers\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AceEditor from 'react-ace';\nimport Rating from '@material-ui/lab/Rating';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\n\nimport './QuestionInterface.css'\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n\ntype MyProps = {\n    question: number,\n    showAlert: boolean,\n    isLoading: boolean,\n    feedbackRating: number,\n    questions: QuestionIface[],\n    handleStart: () => void,\n    handleStartOver: () => void,\n    handleNextQuestion: () => void,\n    handlePrevQuestion: () => void,\n    handleCheckAnswer: () => void,\n    toggleComplete: (arg0: boolean) => void,\n    handleClickQuestion: (arg0: number) => void,\n    handleAlertClose: () => void,\n\n};\n\nclass QuestionInterface extends Component<MyProps, {}> {\n    state = {\n        showPastAnswers: false,\n    };\n\n    handlePastAnswerSwitch = (e: any) => {\n        this.setState({ showPastAnswers: e.target.checked })\n    };\n\n\n    renderQuestion = () => {\n        const questions = this.props.questions;\n        const currQ = this.props.question;\n        switch (currQ) {\n            case 0:\n                return (\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\n                        <Typist className='title-font'>\n                            Learn how to script in JavaScript from Python!\n                        </Typist>\n                        <div className='d-flex align-items-center justify-content-center flex-column'\n                            style={{ marginTop: '25px' }}>\n                            <AceEditor\n                                readOnly={false}\n                                wrapEnabled\n                                height='50vh'\n                                width='70vw'\n                                mode=\"javascript\"\n                                theme=\"monokai\"\n                                name=\"info-section\"\n                                tabSize={0}\n                                editorProps={{\n                                    $blockScrolling: true,\n                                }}\n                                value={questions[currQ].questionText as string}\n                                style={{ maxWidth: 570 }}\n                            />\n                        </div>\n                        <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                            onClick={this.props.handleStart}>\n                            START\n                        </Button>\n                    </div>\n                );\n            case questions.length:\n                return (\n                    <div className='d-flex flex-column align-items-center justify-content-center'>\n                        <Typist className='title-font'>\n                            Congratulations on finishing the course\n                        </Typist>\n                        <p style={{ marginBottom: 0 }}>Please leave us a rating below</p>\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                            <Rating\n                                name=\"simple-controlled\"\n                                value={this.props.feedbackRating}\n                                onChange={(event, newValue) => {\n                                    this.setState({ feedbackRating: newValue })\n                                }}\n                                size=\"large\"\n                                emptyIcon={<StarBorderIcon fontSize=\"inherit\" style={{ color: \"white\" }} />}\n                            />\n                        </Box>\n                        <p>And also help us to complete a feedback form <a\n                            href='https://docs.google.com/forms/d/e/1FAIpQLSfM35tbCqA1qp8Z95il-rWhtXZdLI_3orBRK8onNHISGxbYNQ/viewform?usp=sf_link'\n                            className='feedback-link'>here</a>.</p>\n                        <Button variant=\"outlined\" className='button-start' size='large'\n                            onClick={this.props.handleStartOver}>\n                            START OVER\n                        </Button>\n                    </div>\n                );\n            default:\n                return (\n                    <Question question={questions[currQ]}\n                        index={currQ}\n                        nextQuestion={this.props.handleNextQuestion}\n                        prevQuestion={this.props.handlePrevQuestion}\n                        checkAnswer={this.props.handleCheckAnswer}\n                        lastQuestion={currQ === questions.length - 1}\n                        toggleComplete={this.props.toggleComplete}\n                        isLoading={this.props.isLoading} />\n\n                );\n\n        }\n    };\n\n    renderPastAnswers = () => {\n        return <PastAnswers questions={this.props.questions}\n            question={this.props.question} />\n    };\n\n    renderContent = () => {\n        if (!this.state.showPastAnswers) {\n            return this.renderQuestion()\n        } else {\n            return this.renderPastAnswers();\n        }\n    };\n\n    render() {\n        const questions = this.props.questions;\n        const currQ = this.props.question;\n        const listQuestions = this.props.questions.map((question, index) => {\n            if (index === 0) {\n                return null;\n            }\n            return (\n                <Tab key={index}\n                    className={`d-flex align-items-center`}\n                    label={\n                        <div className='d-flex align-items-center'>\n                            <div className='question-circle'\n                                style={{ backgroundColor: index <= currQ || question.completed ? '#007bff' : 'grey' }}\n                            >{index}</div>\n                        </div>\n                    }\n                />);\n        });\n\n        return (\n            <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\n                id='page-wrap'>\n                {currQ > 0 ?\n                    <Row className='d-flex align-items-center justify-content-center'\n                        style={{ width: '80vw', marginBottom: 15 }}>\n                        <Tabs\n                            value={currQ - 1}\n                            onChange={(e, v) => {\n                                if (questions[v + 1].completed) {\n                                    this.props.handleClickQuestion(v + 1)\n                                }\n                            }}\n                            textColor=\"primary\"\n                            variant='fullWidth'\n                            centered\n                            TabIndicatorProps={\n                                {\n                                    className: 'active-tab',\n                                    style: { display: \"none\" }\n                                }\n                            }\n                        >\n                            {listQuestions}\n                        </Tabs>\n                    </Row> : ''}\n                {this.props.showAlert ?\n                    <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\n                        <Col xs={10}>\n                            {this.props.questions[currQ].completed ?\n                                <Alert variant='success' onClose={this.props.handleAlertClose} dismissible>\n                                    You answered the question correctly! Please move on to the next question.\n                                </Alert> :\n                                <Alert variant='danger' onClose={this.props.handleAlertClose} dismissible>\n                                    Please try again! You can use the hints if you need more help.\n                                </Alert>\n                            }\n                        </Col>\n                    </Row> : ''\n                }\n                {currQ > 0 ?\n                    <Row className='d-flex align-items-center'\n                        style={{ width: '80vw' }}>\n                        <FormGroup row className='ml-auto'>\n                            <FormControlLabel\n                                color=\"primary\"\n                                control={\n                                    <Switch checked={this.state.showPastAnswers} onChange={this.handlePastAnswerSwitch}\n                                        value=\"showPastAnswers\" />\n                                }\n                                label=\"Show Past Answers\"\n                                labelPlacement=\"start\"\n                            />\n                        </FormGroup>\n                    </Row>\n                    : ''\n                }\n                <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\n                    <Col xs={10}>\n                        {this.renderContent()}\n                    </Col>\n                </Row>\n            </Container>\n\n        );\n    }\n}\n\nexport default QuestionInterface;\n","import { QuestionIface, QuestionType } from \"./components/Form/Question\";\n\nexport const questions: QuestionIface[] =\n    [\n        {\n            questionTitle: \"\",\n            questionTutorial: \"\",\n            questionText: \"/*\\n Welcome to From Python to JS. \\n\\n This quick and easy online module will teach you JavaScript, the popular programming language used for the Web. \\n\\n JavaScript is a scripting or programming language that allows you to implement complex things on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, along with HTML and CSS .\\n*/\",\n            answer: \"\",\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: ``,\n            exportCode: '',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Comments\",\n            questionTutorial: \"In JavaScipt, commenting can be done by using: \\n // For single line code \\n /* For multiline code */\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"Replace # with // and ''' with /*\",\n            answer: \"# a one line comment\\n\" +\n                \"\\n\" +\n                \"'''\\n\" +\n                \"this is a longer,\\n\" +\n                \"multi-line comment\\n\" +\n                \"'''\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(1).toBe(1);\n});`,\n            exportCode: '',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Declarations\",\n            questionTutorial: \"In JavaScipt, there are three kinds of variable declarations in JS.\\n\" +\n                \"let: Declares a block-scoped, local variable, optionally initializing it to a value\\n\" +\n                \"const: Declares a block-scoped, read-only named constant.\\n\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"Declare your variables with const when needed\",\n            answer: `x = 42\ny = 13\nx = \"forty-two\"\nz = \"The answer is \" + 42\ncoffees = ['French Roast', 'Colombian', 'Kona']\n`,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"task2\", () => {\n    expect(app.x).toBe(\"forty-two\");\n    expect(app.y).toBe(13);\n    expect(app.z).toBe(\"The answer is 42\");\n    expect(app.coffees).toEqual(['French Roast', 'Colombian', 'Kona']);\n});`,\n            exportCode: `\nexports.x = x;\nexports.y = y;\nexports.z = z;\nexports.coffees = coffees;`,\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Basic Functions\",\n            questionTutorial: \"In JavaScipt, we first have to declare functions as functions.\\n Also, replace the : with curly braces {}\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"Look up how to write a simple Javascript function on MDN\",\n            answer: \"def square(num):\\n      return num * num\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"square\", () => {\n    expect(app.square(3)).toBe(9);\n    expect(app.square(-3)).toBe(9);\n});`,\n            exportCode: \"\\nexports.square = square;\",\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Arrow functions\",\n            questionTutorial: `An arrow function has a shorter syntax compared to function expressions. Arrow functions are always anonymous.\nConvert square to an arrow function.\n            `,\n            questionText: \"Please convert 'square' into an arrow function\",\n            hint: \"Look up how to write a arrow functions on MDN\",\n            answer: `function square(num) {\n    return num * num;\n}`,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"square\", () => {\n    expect(app.square(3)).toBe(9);\n    expect(app.square(-3)).toBe(9);\n});`,\n            exportCode: \"\\nexports.square = square;\",\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Rest Parameters\",\n            questionTutorial: \"The rest parameter syntax allows us to represent an indefinite number of arguments as an array.\\n In the example, we use the rest parameters to collect arguments from the second one to the end. We then multiply them by the first one.\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"The equivalent of '*args' in Python is '...args' in Javascript\",\n            answer: \"def multiply(multiplier, *args):\\n\" +\n                \"    return map(lambda x: multiplier * x, args) \\n\" +\n                \"\\n\" +\n                \"var arr = multiply(2, 1, 2, 3);\\n\" +\n                \"console.log(arr); // [2, 4, 6]\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(app.multiply(2,1,2,3)).toBe([2,4,6]);\n});`,\n            exportCode: \"\\nexports.multiply = multiply;\",\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Control Flow: if-else\",\n            questionTutorial: \"Using if-else, define a function odd(x) that returns True when its integer argument is an odd number and False otherwise\\n\",\n            questionText: \"Define a function odd(x)\",\n            hint: \"if-else statements are surrounded by curly braces\",\n            answer: `function odd(x) {\n\n}`,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(app.odd(1)).toBeTruthy();\n    expect(app.odd(2)).not.toBeTruthy();\n    expect(app.odd(3)).toBeTruthy();\n});`,\n            exportCode: '\\nexports.odd = odd;',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Control Flow: switch\",\n            questionTutorial: `Using switch, write a function getPrice that takes in the name of a fruit and returns the price of the fruit. Oranges are $1, apples are $2, and bananas are $3. If the fruit is none of the 3, return an apology. Sample execution below:`,\n            questionText: \"Write the function 'getPrice()'\",\n            hint: \"\",\n            answer: `\nfunction getPrice(fruits) {\n}\ngetPrice('oranges') // returns \"$1\"\ngetPrice('apples') // returns \"$2\"\ngetPrice('pears') // returns \"Sorry, we are out of pears.\"\n`,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(app.getPrice(\"oranges\")).toBe(\"$1\");\n    expect(app.getPrice(\"apples\")).toBe(\"$2\");\n    expect(app.getPrice(\"bananas\")).toBe(\"$3\");\n    expect(app.getPrice(\"other\")).toBe(\"Sorry, we are out of other.\");\n});`,\n            exportCode: '\\nexports.getPrice = getPrice;',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Loops and Iterations: for loop\",\n            questionTutorial: \"The for statement creates a loop that is executed as long as a condition is true.\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: `\n// A for-loop\nfor step in range(5):\n    print(\"i am at step: \" + step)\n    \n// A while-loop\nn = 0\nx = 0\nwhile n < 3:\n    n += 1\n    x += n\n\n// A for-of loop\narr = [3,5,7]\nfor element in arr:\n    print(arr)`,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"while loop\", () => {\n    expect(app.x).toBe(6);\n    expect(app.n).toBe(3);\n});`,\n            exportCode: `\nexports.x = x;\nexports.n = n;`,\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Working with Objects\",\n            questionTutorial: \"Objects are similar to Python dictionaries, they hold a key:value pairing. An example of initialising a object is as shown below:\\n\",\n            questionText: \"Using a for..in loop, print all the available properties of myCar\",\n            hint: \"Convert the Python for loop to a Javascript for-in loop\",\n            answer: `\nconst myCar = {};\nmyCar.make = 'Ford';\nmyCar.model = 'Mustang';\nmyCar.year = 1969;\n\nfor k in myCar.keys():\n   print (k, myCar[k]) \n            `,\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(1).toBe(1);\n});`,\n            exportCode: '',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"Promises\",\n            questionTutorial: \"What is the output of the following code?\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"Haven complete\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode,\n            testCode: `\nconst app = require(\"./main\");\ntest(\"default\", () => {\n    expect(1).toBe(1);\n});`,\n            exportCode: '',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"sample mcq question\",\n            questionTutorial: \"answer the following sample mcq question\",\n            questionText: [`what is the capital of china?`, `hong kong`, `taipei`, `beijing`],\n            answer: 3,\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.MultipleChoice,\n            testCode: ``,\n            exportCode: '',\n            pastAnswers: [],\n        },\n        {\n            questionTitle: \"sample checkboxes question\",\n            questionTutorial: \"answer this checkboxes question\",\n            questionText: [`Prof Chris is...?`, `handsome`, `smart`, `charming`],\n            answer: [1, 2, 3],\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.Checkboxes,\n            testCode: ``,\n            exportCode: '',\n            pastAnswers: [],\n        },\n    ]","import React from 'react';\nimport { firebaseApp } from \"../../util/firebase\";\nimport * as firebase from 'firebase';\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Icon from '@mdi/react';\nimport { mdiFacebookBox, mdiGoogle } from '@mdi/js';\nimport {withRouter} from 'react-router-dom';\nimport {RouteComponentProps} from \"react-router\";\n\nimport './Resume.css'\n\ntype MyProps = RouteComponentProps & {\n    handleSaveState: (arg0: string) => void,\n    handleLoadState: (arg0: string) => void,\n};\n\nclass Resume extends React.Component<MyProps, {}> {\n\n    state = {\n        userId: ''\n    };\n\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ userId: e.target.value });\n    };\n\n    handleSaveStateCheck = () => {\n        if (this.state.userId !== '') {\n            this.props.handleSaveState(this.state.userId)\n        }\n    };\n\n\n    handleFacebook = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        const provider = new firebase.auth.FacebookAuthProvider();\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\n            //console.log('Facebook login success');\n            if (result !== null && result.user !== null && result.user.uid !== null) {\n                this.props.handleLoadState(result.user.uid);\n                this.props.history.push('/');\n            }\n        }).catch((error) => {\n            console.log(error);\n        });\n    };\n\n    handleGoogle = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        const provider = new firebase.auth.GoogleAuthProvider();\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\n            //console.log('Google login success');\n            if (result !== null && result.user !== null && result.user.uid !== null) {\n                this.props.handleLoadState(result.user.uid);\n                this.props.history.push('/');\n\n            }\n        }).catch((error) => {\n            console.log(error);\n        });\n    };\n\n    render() {\n        return (\n            <div style={{ width: 425 }}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <span style={{ color: 'white', textAlign: \"center\", fontWeight: 'bold' }}>\n                            Type in your past user ID to continue or login to save your progress\n                        </span>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <div className='w-100'>\n                            <label className=\"field a-field a-field_a3\">\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\n                                    onChange={this.handleUserIdChange}\n                                />\n                                <span className=\"a-field__label-wrap\">\n                                    <span className=\"a-field__label\">Enter User ID</span>\n                                </span>\n                            </label>\n                            <div className='d-flex'>\n                                <Button variant=\"outlined\" className='button-start' size='large'\n                                    onClick={this.handleSaveStateCheck}>\n                                    SAVE\n                                </Button>\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\n                                    LOAD\n                                </Button>\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <Button variant=\"outlined\" onClick={this.handleFacebook} className='resume-auth' fullWidth>\n                            <span><Icon path={mdiFacebookBox} size={1} style={{ fill: 'white' }} /> Facebook</span>\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <Button variant=\"outlined\" onClick={this.handleGoogle} className='resume-auth' fullWidth>\n                            <span><Icon path={mdiGoogle} size={1} style={{ fill: 'white' }} /> Google</span>\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Resume);\n\n","import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from \"@material-ui/core/Slide\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SliderMenu from \"./components/Navigation/SliderMenu\";\nimport axios from \"axios\";\nimport { firebaseApp } from './util/firebase';\nimport { RouteComponentProps } from \"react-router\";\n\nimport QuestionInterface from './components/Question/QuestionInterface'\n\nimport './App.css';\nimport { questions } from \"./QuestionList\";\nimport Resume from \"./components/Resume/Resume\";\nimport { QuestionIface } from \"./components/Form/Question\";\n\nexport interface BackendResponse {\n    data: {\n        htmlFeedback: string;\n        isComplete: boolean;\n        jsonFeedback: any;\n        textFeedback: string;\n    }\n};\n\nclass App extends Component<RouteComponentProps> {\n\n    state = {\n        openMenu: false,\n        question: 0, // idx of current question that user is on\n        returnedData: null,\n        questions: questions,\n        feedbackRating: 0, // feedback rating out of 5\n        isLoading: false,\n        showAlert: false,\n        showSnackBar: false,\n        loggedIn: false,\n        uid: '',\n    };\n\n    componentDidMount(): void {\n        firebaseApp.auth().onAuthStateChanged(user => {\n            if (user) {\n                let currentuser = firebaseApp.auth().currentUser;\n                if (currentuser !== null) {\n                    this.setState({\n                        uid: currentuser.uid,\n                        username: currentuser.displayName,\n                        loggedIn: true,\n                    });\n                }\n            } else {\n                this.setState({ loggedIn: false })\n            }\n        });\n    }\n\n    handleMenu = (isOpen: boolean) => {\n        this.setState({ openMenu: isOpen })\n    };\n\n\n    handleClickQuestion = (i: number) => {\n        this.setState({\n            openMenu: false,\n            question: i,\n            showAlert: false,\n        });\n    };\n\n    handleMenuStateChange = (state: any) => {\n        this.setState({ openMenu: state.isOpen })\n    };\n\n    handleStart = () => {\n        this.props.history.push('/');\n        this.setState({ question: 1, openMenu: false, })\n    };\n\n    handleNextQuestion = () => {\n        this.setState({ question: this.state.question + 1, showAlert: false })\n    };\n\n    handlePrevQuestion = () => {\n        this.setState({ question: this.state.question - 1, showAlert: false })\n    };\n    handleAlertClose = () => {\n        this.setState({ showAlert: false })\n    };\n\n    handleStartOver = () => {\n        // TODO clear progress of app\n        this.setState({ question: 0 })\n    };\n\n    handleCheckAnswer = async () => {\n        //Add in fetch nonsense\n        this.setState({ isLoading: true });\n        let gatewayURL = \"https://cl8r4dbpqe.execute-api.us-east-1.amazonaws.com/Prod/\";\n        let questionURL = gatewayURL + `?question=${this.state.question}`;\n        let answer = {\n            \"userToken\": \"ABCDE\",\n            \"shown\": {\n                \"0\": this.state.questions[this.state.question].testCode\n            },\n            \"editable\": {\n                \"0\": this.state.questions[this.state.question].answer + this.state.questions[this.state.question].exportCode\n            },\n            \"hidden\": {\n                \"0\": `{\\n\"scripts\":{ \"test\":\"jest\" }\\n}`,\n            }\n        };\n        try {\n            const res: BackendResponse = await axios.post(questionURL, { ...answer }, {\n                headers: {\n                    Accept: 'application/json',\n                }\n            });\n            console.log(res);\n            let questions = this.state.questions;\n            questions[this.state.question].completed = res.data.isComplete;\n            questions[this.state.question].feedbackText = res.data.htmlFeedback;\n            questions[this.state.question].pastAnswers.push({\n                pass: res.data.isComplete,\n                pastAnswer: questions[this.state.question].answer,\n                errorMessage: res.data.htmlFeedback,\n            });\n\n            this.setState({ questions: questions });\n            if (this.state.loggedIn) {\n                this.handleSaveState(this.state.uid)\n            }\n        } catch (err) {\n            console.error(err);\n        } finally {\n            this.setState({ isLoading: false, showAlert: true });\n        }\n\n    };\n\n    handleSaveState = (name: string) => {\n        let data = {\n            questions: this.state.questions,\n            userId: name,\n            feedbackRating: this.state.feedbackRating,\n            currentQuestion: this.state.question,\n        };\n        firebaseApp.database().ref(`/userdata/${name}`).update(data)\n    };\n\n    handleLoadState = (name: string) => {\n        let db = firebaseApp.database().ref(`/userdata/${name}`);\n        db.once('value').then((snapshot) => {\n            const data = snapshot.val();\n            if (data !== null) {\n                let questions: QuestionIface[] = Object.values(data.questions);\n                for (let q of questions) {\n                    if (q.pastAnswers) { q.pastAnswers = Object.values(q.pastAnswers); }\n                }\n                this.setState({\n                    questions: questions,\n                    feedbackRating: data.feedbackRating,\n                    question: data.currentQuestion\n                });\n                // close menu and open snackbar\n                this.setState({\n                    showSnackBar: true,\n                    openMenu: false,\n                })\n            }\n        }).catch(err => {\n            console.error(err);\n        });\n    };\n\n    toggleAdmin = () => {\n        const pw = prompt('Please enter password');\n        if (pw === \"richu\") {\n            const questions = this.state.questions;\n            questions.forEach(q => {\n                q.completed = true;\n            });\n            this.props.history.push('/');\n            this.setState({\n                questions: questions,\n                question: 1,\n                openMenu: false\n            });\n        }\n    };\n\n    toggleComplete = (isComplete: boolean) => {\n        let questions = this.state.questions;\n        questions[this.state.question].completed = isComplete;\n        this.setState({ questions: questions })\n    };\n\n    render() {\n        const currQ = this.state.question;\n        return (\n            <div className=\"App\">\n                <SliderMenu open={this.state.openMenu} handleMenu={this.handleMenu}\n                    handleMenuStateChange={this.handleMenuStateChange}\n                    handleClickQuestion={this.handleClickQuestion}\n                    handleStart={this.handleStart}\n                    questions={this.state.questions}\n                    question={currQ}\n                    toggleAdmin={this.toggleAdmin}\n                    handleSaveState={this.handleSaveState}\n                    handleLoadState={this.handleLoadState}\n                />\n                <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\n                    id='page-wrap'>\n\n                    <Switch>\n                        <Route exact path=\"/\"\n                            render={(props) => <QuestionInterface {...props} questions={this.state.questions}\n                                question={currQ} handleStart={this.handleStart}\n                                feedbackRating={this.state.feedbackRating}\n                                handleStartOver={this.handleStartOver}\n                                showAlert={this.state.showAlert}\n                                handleNextQuestion={this.handleNextQuestion}\n                                handlePrevQuestion={this.handlePrevQuestion}\n                                handleCheckAnswer={this.handleCheckAnswer}\n                                toggleComplete={this.toggleComplete}\n                                isLoading={this.state.isLoading}\n                                handleAlertClose={this.handleAlertClose}\n                                handleClickQuestion={this.handleClickQuestion}\n\n                            />} />\n                        <Route exact path='/load' render={(props) => <Resume {...props}\n                            handleSaveState={this.handleSaveState}\n                            handleLoadState={this.handleLoadState}\n                        />} />\n                    </Switch>\n                    <Snackbar anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n                        open={this.state.showSnackBar}\n                        autoHideDuration={3000}\n                        onClose={() => { this.setState({ showSnackBar: false }) }}\n                        message={<span id=\"message-id\">Profile has been successfully loaded.</span>}\n                        action={\n                            <IconButton\n                                key=\"close\"\n                                color=\"inherit\"\n                                onClick={() => { this.setState({ showSnackBar: false }) }}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        }\n                        TransitionComponent={(props) => { return <Slide {...props} direction=\"up\" /> }}\n                    />\n                </Container>\n            </div>\n        )\n            ;\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router >\n        <App/>\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}