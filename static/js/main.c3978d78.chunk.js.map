{"version":3,"sources":["components/Navigation/NavBar.tsx","components/Form/Question.tsx","components/Navigation/SliderMenu.tsx","QuestionList.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["NavBar","Navbar","fixed","IconButton","style","color","onClick","props","handleMenu","fontSize","React","Component","Question","handleAnswerChange","newValue","question","answer","Container","className","Row","this","questionName","questionTitle","Col","fluid","lineHeight","questionTutorial","split","map","item","key","feedbackText","questionText","OverlayTrigger","placement","overlay","Tooltip","id","hint","wrapEnabled","height","width","mode","theme","name","onChange","tabSize","editorProps","$blockScrolling","value","Button","variant","size","prevQuestion","ProgressBar","now","index","marginLeft","isLoading","CircularProgress","checkAnswer","nextQuestion","disabled","completed","lastQuestion","SliderMenu","listQuestions","questions","Grid","xs","handleClickQuestion","pageWrapId","outerContainerId","customBurgerIcon","isOpen","open","onStateChange","state","handleMenuStateChange","customCrossIcon","container","spacing","length","handleStart","Divider","backgroundColor","App","openMenu","returnedData","feedbackRating","showAlert","setState","i","handleNextQuestion","handlePrevQuestion","handleAlertClose","handleStartOver","handleCheckAnswer","a","questionURL","axios","post","headers","Accept","res","console","log","data","isComplete","textFeedback","renderContent","marginTop","readOnly","maxWidth","marginBottom","Box","component","mb","borderColor","Rating","event","emptyIcon","href","Alert","onClose","dismissible","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3978d78.chunk.js","sourcesContent":["import IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/MenuRounded';\r\nimport React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\n\r\ntype MyProps = {\r\n    handleMenu: (arg0: boolean) => void,\r\n};\r\nclass NavBar extends React.Component<MyProps, {}> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Navbar fixed='top'>\r\n                <IconButton style={{ color: \"white\" }} onClick={() => this.props.handleMenu(true)}>\r\n                    <MenuIcon fontSize='large' />\r\n                </IconButton>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","import React from 'react';\r\nimport './Question.css';\r\nimport AceEditor from \"react-ace\";\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Container, Col, Row, OverlayTrigger, Tooltip, ProgressBar} from 'react-bootstrap';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport HelpIcon from '@material-ui/icons/HelpOutline';\r\n\r\nexport interface QuestionType {\r\n    questionName: string,\r\n    questionTitle: string,\r\n    questionTutorial: string,\r\n    questionText: string,\r\n    hint:string,\r\n    answer: string,\r\n    feedbackText: string,\r\n    completed: boolean\r\n}\r\n\r\ntype MyProps = {\r\n    lastQuestion: boolean,\r\n    isLoading: boolean,\r\n    index: number,\r\n    question: QuestionType,\r\n    nextQuestion: () => void,\r\n    prevQuestion: () => void,\r\n    checkAnswer: () => void,\r\n};\r\n\r\nclass Question extends React.Component<MyProps, {}> {\r\n\r\n    handleAnswerChange = (newValue: string) => {\r\n        this.props.question.answer = newValue;\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container className='d-flex align-items-center justify-content-center flex-column'>\r\n                <Row>\r\n                    <h3 className='question-title'>{this.props.question.questionName}: {this.props.question.questionTitle}</h3>\r\n                </Row>\r\n                <Row className='w-100'>\r\n                    <Col>\r\n                        <Container fluid className='h-100'>\r\n                            <Row className='h-50'>\r\n                                <div style={{lineHeight:1}}>\r\n                                    <h6>Instructions:</h6>\r\n                                    {this.props.question.questionTutorial.split('\\n').map(function (item, key) {\r\n                                        return (\r\n                                            <span key={key} className='question-font'>\r\n                                                {item}\r\n                                                <br />\r\n                                            </span>)\r\n                                    })}\r\n                                </div>\r\n                            </Row>\r\n                            <Row className='d-flex flex-column h-50'>\r\n                                <h6>Output:</h6>\r\n                                <div className='output-box'>\r\n                                    <p className='feedback-text-font'>{this.props.question.feedbackText}</p>\r\n                                </div>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col>\r\n                        <div className='d-flex align-items-center '>\r\n                            <p className='question-instruction'><strong>{this.props.question.questionText}</strong></p>\r\n\r\n                            <OverlayTrigger\r\n                                key='bottom'\r\n                                placement='bottom'\r\n                                overlay={\r\n                                    <Tooltip id='hint'>\r\n                                        {this.props.question.hint}\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <HelpIcon/>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                        <AceEditor\r\n                            wrapEnabled\r\n                            height='40vh'\r\n                            width='100%'\r\n                            mode=\"javascript\"\r\n                            theme=\"monokai\"\r\n                            name=\"answerInput\"\r\n                            onChange={this.handleAnswerChange}\r\n                            tabSize={4}\r\n                            editorProps={{\r\n                                $blockScrolling: true,\r\n                            }}\r\n                            value={this.props.question.answer}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className='d-flex w-100'>\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                            onClick={this.props.prevQuestion}>\r\n                        PREVIOUS\r\n                    </Button>\r\n                    <div className='d-flex align-items-center justify-content-center progress-bar-container'>\r\n                        <ProgressBar variant=\"success\" now={this.props.index*10} style={{width:150}}/>\r\n                        <span className='question-instruction' style={{marginLeft:20}}>{this.props.index}/10 Questions</span>\r\n                    </div>\r\n                    {this.props.isLoading ?\r\n                        <CircularProgress className='loading-color ml-auto'/>\r\n                        : <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                                  onClick={this.props.checkAnswer}>\r\n                            RUN\r\n                        </Button>}\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                            onClick={this.props.nextQuestion} style={{marginLeft: 10}}\r\n                            disabled={!this.props.question.completed}\r\n                    >\r\n                        {this.props.lastQuestion ? \"SUBMIT\" : 'NEXT'}\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React from 'react';\r\nimport { push as Menu, State } from \"react-burger-menu\";\r\nimport './SliderMenu.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CircleIcon from '@material-ui/icons/Lens';\r\nimport CircleOutlineIcon from '@material-ui/icons/LensOutlined';\r\nimport { QuestionType } from \"../Form/Question\";\r\n\r\ntype MyProps = {\r\n    open: boolean,\r\n    question: number,\r\n    questions: QuestionType[],\r\n    handleMenu: (arg0: boolean) => void,\r\n    handleClickQuestion: (arg0: number) => void,\r\n    handleMenuStateChange: (arg0: State) => void,\r\n    handleStart: () => void,\r\n};\r\n\r\nclass SliderMenu extends React.Component<MyProps, {}> {\r\n\r\n    render() {\r\n\r\n        const listQuestions = this.props.questions.map((question, index) => {\r\n            if (index === 0 || index === 11) {\r\n                return ''\r\n            } else {\r\n                return (\r\n                    <Grid item xs={12} onClick={() => {\r\n                        if (question.completed) {\r\n                            this.props.handleClickQuestion(index)\r\n                        }\r\n                    }} key={index} className={`d-flex align-items-center ${question.completed ? \"hover-pointer\" : \"hover-cancel\"}`}\r\n                    >\r\n                        {question.completed ? <CircleIcon style={{ color: 'green' }} /> : <CircleOutlineIcon style={{ color: 'red' }} />}\r\n                        <span style={{ marginLeft: 10 }}>\r\n                            {question.questionName}\r\n                        </span>\r\n                    </Grid>);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Menu pageWrapId={\"page-wrap\"} outerContainerId={\"root\"}\r\n                customBurgerIcon={false} isOpen={this.props.open}\r\n                onStateChange={(state) => this.props.handleMenuStateChange(state)}\r\n                customCrossIcon={false} className='menu-width'\r\n            >\r\n                <Grid container spacing={3}\r\n                >\r\n                    <Grid item xs={12} className='d-flex align-items-center'>\r\n                        <IconButton className='closeButtonMenu ml-auto' onClick={() => this.props.handleMenu(false)}>\r\n                            <CloseIcon className='closeIconMenu' />\r\n                        </IconButton>\r\n                    </Grid>\r\n                    {this.props.question === 0 || this.props.question === (this.props.questions.length) ?\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                                <Button variant=\"outlined\" className='button-start' size='large'\r\n                                    onClick={this.props.handleStart}>\r\n                                    START\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <span style={{ color: 'white' }}>\r\n                                    From Python to JS is a quick and easy online module will teach you JavaScript, the popular programming language used for the Web.\r\n                                </span>\r\n                            </Grid>\r\n                        </Grid>\r\n                        :\r\n                        <Grid container spacing={3}>\r\n                            {listQuestions}\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n            </Menu>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default SliderMenu;\r\n","import { QuestionType } from \"./components/Form/Question\";\r\n\r\nexport const questions: QuestionType[] =\r\n    [\r\n        {\r\n            questionName: \"\",\r\n            questionTitle: \"\",\r\n            questionTutorial: \"\",\r\n            questionText: \"/*\\n Welcome to From Python to JS. \\n\\n This quick and easy online module will teach you JavaScript, the popular programming language used for the Web. \\n\\n JavaScript is a scripting or programming language that allows you to implement complex things on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, along with HTML and CSS .\\n*/\",\r\n            answer: \"\",\r\n            hint:\"\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 1\",\r\n            questionTitle: \"Comments\",\r\n            questionTutorial: \"In JavaScipt, commenting can be done by using: \\n // For single line code \\n /* For multiline code */\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"Replace # with // and ''' with /*\",\r\n            answer: \"# a one line comment\\n\" +\r\n                \"\\n\" +\r\n                \"'''\\n\" +\r\n                \"this is a longer,\\n\" +\r\n                \"multi-line comment\\n\" +\r\n                \"'''\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 2\",\r\n            questionTitle: \"Declarations\",\r\n            questionTutorial: \"In JavaScipt, there are three kinds of variable declarations in JS.\\n\" +\r\n                \"var: Declares a variable, optionally initializing it to a value\\n\" +\r\n                \"let: Declares a block-scoped, local variable, optionally initializing it to a value\\n\" +\r\n                \"const: Declares a block-scoped, read-only named constant.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"x = 42\\n\" +\r\n                \"y = 13\\n\" +\r\n                \"x = \\\"forty-two\\\"\\n\" +\r\n                \"z = \\\"The answer is\\\" + 42\\n\" +\r\n                \"coffees = ['French Roast', 'Colombian', 'Kona']\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 3\",\r\n            questionTitle: \"Basic Functions\",\r\n            questionTutorial: \"In JavaScipt, we first have to declare functions as functions.\\n Also, replace the : with curly braces {}\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"def square(num):\\n      return num * num\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 4\",\r\n            questionTitle: \"Default Parameters\",\r\n            questionTutorial: \"In JavaScipt, default parameters allow us to initialize functions with default values.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"def multiply(a, b=5):\\n\" +\r\n                \"    b = b if type(b)==int else 1\\n\" +\r\n                \"    return a * b\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 5\",\r\n            questionTitle: \"Rest Parameters\",\r\n            questionTutorial: \"The rest parameter syntax allows us to represent an indefinite number of arguments as an array.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"def multiply(multiplier, *args):\\n\" +\r\n                \"    return map(lambda x: multiplier * x, args) \\n\" +\r\n                \"\\n\" +\r\n                \"var arr = multiply(2, 1, 2, 3);\\n\" +\r\n                \"console.log(arr); // [2, 4, 6]\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 6\",\r\n            questionTitle: \"Control Flow\",\r\n            questionTutorial: \"Using if-else, define a function odd(x) that returns True when its integer argument is an odd number and False otherwise\\n\" +\r\n                \"\\n\" +\r\n                \"function odd(x){\\n\" +\r\n                \"    return x%2 === 1\\n\" +\r\n                \"}\\n\" +\r\n                \"Using switch, write a function getPrice that takes in the name of a fruit and logs the price of the fruit. Oranges are $1, apples are $2, and bananas are $3. If the fruit is none of the 3, log an apology. Sample execution below:\",\r\n            questionText: \"Please write a switch statement\",\r\n            hint:\"\",\r\n            answer: \"getPrice('oranges') // logs \\\"$1\\\"\\n\" +\r\n                \"getPrice('pears') // logs \\\"Sorry, we are out of pears.\\\"\\n\" +\r\n                \"function getPrice(fruits) {\\n\" +\r\n                \"}\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 7\",\r\n            questionTitle: \"Error Handling\",\r\n            questionTutorial: \"\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"try:\\n\" +\r\n                \"    monthName = getMonthName(month) # function could throw exception\\n\" +\r\n                \"except Exception as e:\\n\" +\r\n                \"    monthName = 'unknown'\\n\" +\r\n                \"    logMyErrors(e)\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 8\",\r\n            questionTitle: \"Loops and Iterations\",\r\n            questionTutorial: \"The for statement creates a loop that is executed as long as a condition is true.\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"for step in range(5):\\n\" +\r\n                \"    print(\\\"i am at step: \\\" + step)\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 9\",\r\n            questionTitle: \"Working with Objects\",\r\n            questionTutorial: \"Objects are similar to Python dictionaries, they hold a key:value pairing. An example of initialising a object is as shown below:\\n\" +\r\n                \"var myCar = new Object();\\n\" +\r\n                \"myCar.make = 'Ford';\\n\" +\r\n                \"myCar.model = 'Mustang';\\n\" +\r\n                \"myCar.year = 1969;\",\r\n            questionText: \"Using a for..in loop, print all the available properties of\",\r\n            hint:\"\",\r\n            answer: \"for k in myCar.keys():\\n\" +\r\n                \"   print (k, myCar[k]) \",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n        {\r\n            questionName: \"Task 10\",\r\n            questionTitle: \"Promises\",\r\n            questionTutorial: \"Testing\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint:\"\",\r\n            answer: \"Haven complete\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n        },\r\n    ]","import React, {Component} from 'react';\r\nimport Typist from 'react-typist';\r\nimport 'react-typist/dist/Typist.css';\r\nimport {Container, Col, Row, Alert} from 'react-bootstrap';\r\nimport NavBar from \"./components/Navigation/NavBar\";\r\nimport Question from \"./components/Form/Question\";\r\nimport SliderMenu from \"./components/Navigation/SliderMenu\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport AceEditor from 'react-ace';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport axios from \"axios\";\r\n\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\n\r\n\r\nimport './App.css';\r\nimport {questions} from \"./QuestionList\";\r\n\r\nexport interface BackendResponse {\r\n    data: {\r\n        htmlFeedback: string;\r\n        isComplete: boolean;\r\n        jsonFeedback: any;\r\n        textFeedback: string;\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        openMenu: false,\r\n        question: 0,\r\n        returnedData: null,\r\n        questions: questions,\r\n        feedbackRating: 0,\r\n        isLoading: false,\r\n        showAlert: false,\r\n    };\r\n\r\n    handleMenu = (isOpen: boolean) => {\r\n        this.setState({openMenu: isOpen})\r\n    };\r\n\r\n\r\n    handleClickQuestion = (i: number) => {\r\n        this.setState({\r\n            openMenu: false,\r\n            question: i,\r\n            showAlert:false,\r\n        });\r\n    };\r\n\r\n    handleMenuStateChange = (state: any) => {\r\n        this.setState({openMenu: state.isOpen})\r\n    };\r\n\r\n    handleStart = () => {\r\n        this.setState({question: 1, openMenu: false,})\r\n    };\r\n\r\n    handleNextQuestion = () => {\r\n        this.setState({question: this.state.question + 1, showAlert:false})\r\n    };\r\n\r\n    handlePrevQuestion = () => {\r\n        this.setState({question: this.state.question - 1, showAlert:false})\r\n    };\r\n    handleAlertClose = () => {\r\n        this.setState({showAlert: false})\r\n    };\r\n\r\n    handleStartOver =()=>{\r\n        this.setState({question:0})\r\n    };\r\n\r\n    handleCheckAnswer = async () => {\r\n        //Add in fetch nonsense\r\n        this.setState({isLoading: true});\r\n        let gatewayURL = \"https://cl8r4dbpqe.execute-api.us-east-1.amazonaws.com/Prod/\";\r\n        let questionURL = gatewayURL + `?question=${this.state.question}`;\r\n        let answer = {\r\n            \"userToken\": \"ABCDE\",\r\n            \"shown\": {\r\n                \"0\": `//main.spec.js \\nconst app = require(\"./main\");\\ndescribe(\"Load app from main.js\", () => {\\n    it(\"works\", () => {\\nexpect(true).toBeTruthy();\\n    }); \\n});`\r\n            },\r\n            \"editable\": {\r\n                \"0\": this.state.questions[this.state.question].answer\r\n            },\r\n            \"hidden\": {\r\n                \"0\": `{\\n\"scripts\":{ \"test\":\"jest\" }\\n}`,\r\n            }\r\n        };\r\n        try {\r\n            const res: BackendResponse = await axios.post(questionURL, {...answer}, {\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                }\r\n            });\r\n            console.log(res);\r\n            let questions = this.state.questions;\r\n            questions[this.state.question].completed = res.data.isComplete;\r\n            questions[this.state.question].feedbackText = res.data.textFeedback;\r\n            // questions[this.state.question].completed = true;\r\n            this.setState({questions: questions})\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            this.setState({isLoading: false, showAlert: true});\r\n        }\r\n\r\n    };\r\n\r\n    renderContent = () => {\r\n        switch (this.state.question) {\r\n            case 0:\r\n                return (\r\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\r\n                        <Typist className='title-font'>\r\n                            Learn how to script in JavaScript from Python!\r\n                        </Typist>\r\n                        <div className='d-flex align-items-center justify-content-center flex-column'\r\n                             style={{marginTop: '25px'}}>\r\n                            <AceEditor\r\n                                readOnly={false}\r\n                                wrapEnabled\r\n                                height='50vh'\r\n                                width='70vw'\r\n                                mode=\"javascript\"\r\n                                theme=\"monokai\"\r\n                                name=\"info-section\"\r\n                                tabSize={0}\r\n                                editorProps={{\r\n                                    $blockScrolling: true,\r\n                                }}\r\n                                value={this.state.questions[this.state.question].questionText}\r\n                                style={{maxWidth: 570}}\r\n                            />\r\n                        </div>\r\n                        <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                                onClick={this.handleStart}>\r\n                            START\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            case this.state.questions.length:\r\n                return (\r\n                    <div className='d-flex flex-column align-items-center justify-content-center'>\r\n                        <Typist className='title-font'>\r\n                            Congratulations on finishing the course\r\n                        </Typist>\r\n                        <p style={{marginBottom: 0}}>Please leave us a rating below</p>\r\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                            <Rating\r\n                                name=\"simple-controlled\"\r\n                                value={this.state.feedbackRating}\r\n                                onChange={(event, newValue) => {\r\n                                    this.setState({feedbackRating: newValue})\r\n                                }}\r\n                                size=\"large\"\r\n                                emptyIcon={<StarBorderIcon fontSize=\"inherit\" style={{color: \"white\"}}/>}\r\n                            />\r\n                        </Box>\r\n                        <p>And also help us to complete a feedback form <a\r\n                            href='https://docs.google.com/forms/d/e/1FAIpQLSfM35tbCqA1qp8Z95il-rWhtXZdLI_3orBRK8onNHISGxbYNQ/viewform?usp=sf_link'\r\n                            className='feedback-link'>here</a>.</p>\r\n                        <Button variant=\"outlined\" className='button-start' size='large'\r\n                                onClick={this.handleStartOver}>\r\n                            START OVER\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <Question question={this.state.questions[this.state.question]}\r\n                              index={this.state.question}\r\n                              nextQuestion={this.handleNextQuestion}\r\n                              prevQuestion={this.handlePrevQuestion}\r\n                              checkAnswer={this.handleCheckAnswer}\r\n                              lastQuestion={this.state.question === this.state.questions.length - 1}\r\n                              isLoading={this.state.isLoading}/>\r\n\r\n                );\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <SliderMenu open={this.state.openMenu} handleMenu={this.handleMenu}\r\n                            handleMenuStateChange={this.handleMenuStateChange}\r\n                            handleClickQuestion={this.handleClickQuestion}\r\n                            handleStart={this.handleStart}\r\n                            questions={this.state.questions}\r\n                            question={this.state.question}\r\n                />\r\n                <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\r\n                           id='page-wrap'>\r\n                    <NavBar handleMenu={this.handleMenu}/>\r\n                    {this.state.showAlert ?\r\n                        <Row className='d-flex align-items-center justify-content-center' style={{width: '80vw'}}>\r\n                            <Col xs={10}>\r\n                                {this.state.questions[this.state.question].completed ?\r\n                                    <Alert variant='success' onClose={this.handleAlertClose} dismissible>\r\n                                        You answered the question correctly! Please move on to the next question.\r\n                                    </Alert> :\r\n                                    <Alert variant='danger' onClose={this.handleAlertClose} dismissible>\r\n                                        Please try again! You can use the hints if you need more help.\r\n                                    </Alert>\r\n                                }\r\n                            </Col>\r\n                        </Row> : ''\r\n\r\n                    }\r\n                    <Row className='d-flex align-items-center justify-content-center' style={{width: '80vw'}}>\r\n                        <Col xs={10}>\r\n                            {this.renderContent()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}