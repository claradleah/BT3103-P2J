{"version":3,"sources":["components/Form/Question.tsx","components/Navigation/NavBar.tsx","history.js","components/Navigation/SliderMenu.tsx","util/firebase.tsx","components/Question/QuestionInterface.tsx","QuestionList.tsx","components/Resume/Resume.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["QuestionType","NavBar","Navbar","fixed","IconButton","style","color","onClick","props","handleMenu","fontSize","React","Component","createBrowserHistory","SliderMenu","state","userId","handleUserIdChange","e","setState","target","value","handleSaveStateCheck","handleSaveState","handleResume","history","push","pageWrapId","outerContainerId","isOpen","this","open","onStateChange","handleMenuStateChange","className","question","questions","length","Grid","container","spacing","item","xs","Button","variant","size","handleStart","toggleAdmin","Divider","backgroundColor","href","rel","placeholder","onChange","handleLoadState","firebaseApp","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Question","handleAnswerChange","newValue","answer","checkMCQAns","i","toggleComplete","checkCheckboxesAns","expected","Set","as","bs","a","has","eqSet","selected","handleCheckboxAnsChange","event","checked","add","delete","renderQuestion","type","EditableCode","renderEditableCode","MultipleChoice","renderMCQ","Checkboxes","renderCheckboxes","qn","questionText","options","key","Row","rows","text","Col","Container","fluid","lineHeight","questionTutorial","split","map","feedbackText","marginBottom","marginRight","OverlayTrigger","placement","overlay","Tooltip","id","hint","wrapEnabled","height","width","mode","theme","name","tabSize","editorProps","$blockScrolling","questionName","questionTitle","prevQuestion","isLoading","CircularProgress","checkAnswer","nextQuestion","marginLeft","disabled","completed","lastQuestion","QuestionInterface","renderContent","currQ","marginTop","readOnly","maxWidth","Box","component","mb","borderColor","Rating","feedbackRating","emptyIcon","handleStartOver","index","handleNextQuestion","handlePrevQuestion","handleCheckAnswer","listQuestions","Tab","label","Tabs","v","handleClickQuestion","textColor","centered","TabIndicatorProps","display","showAlert","Alert","onClose","handleAlertClose","dismissible","Resume","handleFacebook","preventDefault","provider","FacebookAuthProvider","auth","signInWithPopup","then","result","user","uid","catch","error","console","log","handleGoogle","GoogleAuthProvider","textAlign","fontWeight","fullWidth","path","mdiFacebookBox","fill","mdiGoogle","App","openMenu","returnedData","showSnackBar","loggedIn","questionURL","axios","post","headers","Accept","res","data","isComplete","textFeedback","database","ref","update","once","snapshot","val","Object","values","window","setTimeout","err","prompt","forEach","q","handleCloseSnackBar","SlideTransition","Slide","direction","onAuthStateChanged","currentuser","currentUser","username","displayName","exact","render","Snackbar","anchorOrigin","horizontal","vertical","message","action","TransitionComponent","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5f9b886.chunk.js","sourcesContent":["import React from 'react';\nimport './Question.css';\nimport AceEditor from \"react-ace\";\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\nimport Button from \"@material-ui/core/Button\";\nimport { Container, Col, Row, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nexport interface QuestionIface {\n    questionName: string,\n    questionTitle: string,\n    questionTutorial: string,\n    questionText: string | string[],\n    hint: string,\n    answer: string | number | number[],\n    feedbackText: string,\n    completed: boolean\n    type: QuestionType\n}\n\nexport enum QuestionType {\n    EditableCode, // qn with editable code that can run\n    MultipleChoice, // mcq\n    Checkboxes // select all that applies\n}\n\ntype MyProps = {\n    lastQuestion: boolean,\n    isLoading: boolean,\n    index: number,\n    question: QuestionIface,\n    nextQuestion: () => void,\n    prevQuestion: () => void,\n    checkAnswer: () => void,\n    toggleComplete: (arg0: boolean) => void,\n};\n\nclass Question extends React.Component<MyProps, { selected: Set<number> }> {\n    constructor(props: MyProps) {\n        super(props);\n        this.state = { selected: new Set() };\n    }\n\n    handleAnswerChange = (newValue: string) => {\n        this.props.question.answer = newValue;\n    };\n\n    checkMCQAns = (i: number) => {\n        this.props.toggleComplete(i === (this.props.question.answer as number));\n    };\n\n    checkCheckboxesAns = () => {\n        const expected = new Set(this.props.question.answer as number[]);\n        this.props.toggleComplete(eqSet(expected, this.state.selected));\n    };\n\n    handleCheckboxAnsChange = (event: any, i: number) => {\n        let selected = this.state.selected;\n        if (event.target.checked) {\n            selected.add(i);\n        } else {\n            selected.delete(i);\n        }\n        this.setState({ selected: selected });\n    };\n\n    renderQuestion = () => {\n        switch (this.props.question.type) {\n            case QuestionType.EditableCode:\n                return this.renderEditableCode();\n            case QuestionType.MultipleChoice:\n                return this.renderMCQ();\n            case QuestionType.Checkboxes:\n                return this.renderCheckboxes();\n            default:\n                break;\n        }\n    };\n\n    renderCheckboxes = () => {\n        const qn = this.props.question.questionText as string[];\n        let options = [];\n        for (let i = 1; i < qn.length; i++) {\n            options.push(\n                <label key={i}>\n                    {qn[i]}\n                    <input type='checkbox' onChange={(e) => this.handleCheckboxAnsChange(e, i)} />\n                    <br />\n                </label>\n            )\n        }\n        return (\n            <Row className='w-100'>\n                <div><p className='question-instruction'><strong>{qn[0]}</strong></p></div>\n                <div>{options}</div>\n                <Button className='button-start' onClick={this.checkCheckboxesAns}> Check answer </Button>\n            </Row>\n        )\n    };\n\n    renderMCQ = () => {\n        const qn = this.props.question.questionText as string[];\n        let rows = [];\n        for (let i = 1; i < qn.length; i++) {\n            const text = qn[i]\n            rows.push(\n                <li onClick={() => this.checkMCQAns(i)}><span>{text}</span></li>\n            );\n        }\n        return (\n            <Row className='w-100'>\n                <p className='question-instruction'><strong>{qn[0]}</strong></p>\n                <ul>{rows}</ul>\n            </Row>\n        );\n    };\n\n    renderEditableCode = () => {\n        return (\n            <Row className='w-100'>\n                <Col>\n                    <Container fluid className='h-100'>\n                        <Row className='h-50'>\n                            <div style={{ lineHeight: 1 }}>\n                                <h6>Instructions:</h6>\n                                {this.props.question.questionTutorial.split('\\n').map(function (item, key) {\n                                    return (\n                                        <span key={key} className='question-font'>\n                                            {item}\n                                            <br />\n                                        </span>)\n                                })}\n                            </div>\n                        </Row>\n                        <Row className='d-flex flex-column h-50'>\n                            <h6>Output:</h6>\n                            <div className='output-box'>\n                                <p className='feedback-text-font'>{this.props.question.feedbackText}</p>\n                            </div>\n                        </Row>\n                    </Container>\n                </Col>\n                <Col>\n                    <div className='d-flex align-items-center ' style={{ marginBottom: 10 }}>\n                        <p className='question-instruction'><strong>{this.props.question.questionText}</strong></p>\n                        <div className='ml-auto' style={{ marginRight: 10 }}>\n                            <OverlayTrigger\n                                key='bottom'\n                                placement='bottom'\n                                overlay={\n                                    <Tooltip id='hint'>\n                                        {this.props.question.hint}\n                                    </Tooltip>\n                                }\n                            >\n                                <HelpIcon />\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                    <AceEditor\n                        wrapEnabled\n                        height='40vh'\n                        width='100%'\n                        mode=\"javascript\"\n                        theme=\"monokai\"\n                        name=\"answerInput\"\n                        onChange={this.handleAnswerChange}\n                        tabSize={4}\n                        editorProps={{\n                            $blockScrolling: true,\n                        }}\n                        value={this.props.question.answer as string}\n                    />\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        return (\n            <Container className='d-flex align-items-center justify-content-center flex-column'>\n                <Row>\n                    <h3 className='question-title'>{this.props.question.questionName}: {this.props.question.questionTitle}</h3>\n                </Row>\n                {this.renderQuestion()}\n                <Row className='d-flex w-100'>\n                    <Button variant=\"outlined\" className='button-start' size='large'\n                        onClick={this.props.prevQuestion}>\n                        PREVIOUS\n                    </Button>\n                    {/*<div className='d-flex align-items-center justify-content-center progress-bar-container'>*/}\n                    {/*    <ProgressBar variant=\"success\" now={this.props.index * 10} style={{ width: 150 }} />*/}\n                    {/*    <span className='question-instruction' style={{ marginLeft: 20 }}>{this.props.index}/?? Questions</span>*/}\n                    {/*</div>*/}\n                    {this.props.isLoading ?\n                        <CircularProgress className='loading-color ml-auto' />\n                        : <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                            onClick={this.props.checkAnswer}>\n                            RUN\n                        </Button>}\n                    <Button variant=\"outlined\" className='button-start' size='large'\n                        onClick={this.props.nextQuestion} style={{ marginLeft: 10 }}\n                        disabled={!this.props.question.completed}\n                    >\n                        {this.props.lastQuestion ? \"Finish\" : 'NEXT'}\n                    </Button>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n// determines if 2 sets are equal. https://stackoverflow.com/a/31129384\nfunction eqSet(as: Set<any>, bs: Set<any>) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport default Question;\n\n","import IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from '@material-ui/icons/MenuRounded';\nimport React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\n\ntype MyProps = {\n    handleMenu: (arg0: boolean) => void,\n};\nclass NavBar extends React.Component<MyProps, {}> {\n\n    render() {\n\n        return (\n            <Navbar fixed='top'>\n                <IconButton style={{ color: \"white\" }} onClick={() => this.props.handleMenu(true)}>\n                    <MenuIcon fontSize='large' />\n                </IconButton>\n            </Navbar>\n        );\n    }\n}\n\nexport default NavBar;\n\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport React from 'react';\nimport { push as Menu, State } from \"react-burger-menu\";\nimport './SliderMenu.css';\nimport Button from \"@material-ui/core/Button\";\nimport Divider from '@material-ui/core/Divider';\nimport { QuestionIface } from \"../Form/Question\";\nimport history from \"../../history\";\n\ntype MyProps = {\n    open: boolean,\n    question: number,\n    questions: QuestionIface[],\n    handleMenu: (arg0: boolean) => void,\n    handleClickQuestion: (arg0: number) => void,\n    handleMenuStateChange: (arg0: State) => void,\n    handleSaveState: (arg0: string) => void,\n    handleLoadState: (arg0: string) => void,\n    handleStart: () => void,\n    toggleAdmin: () => void,\n};\n\nclass SliderMenu extends React.Component<MyProps, {}> {\n\n    state = {\n        userId: ''\n    };\n\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ userId: e.target.value });\n    };\n\n    handleSaveStateCheck = () => {\n        if (this.state.userId !== '') {\n            this.props.handleSaveState(this.state.userId)\n        }\n    };\n\n    handleResume = () => {\n        history.push('/load');\n        this.props.handleMenu(false);\n    };\n\n    render() {\n\n        return (\n            <Menu pageWrapId={\"page-wrap\"} outerContainerId={\"root\"}\n                isOpen={this.props.open}\n                onStateChange={(state) => this.props.handleMenuStateChange(state)}\n                className='menu-width'\n            >\n                {this.props.question === 0 || this.props.question === (this.props.questions.length) ?\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} className='d-flex align-items-center'>\n                            <IconButton className='closeButtonMenu ml-auto'\n                                onClick={() => this.props.handleMenu(false)}>\n                                <CloseIcon className='closeIconMenu' />\n                            </IconButton>\n                        </Grid>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                            <Button variant=\"outlined\" className='button-start' size='large'\n                                onClick={this.props.handleStart}>\n                                START\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n\n                            <Button variant=\"outlined\" className='button-start'\n                                onClick={this.handleResume}>\n                                RESUME\n                                </Button>\n\n                        </Grid>\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                            <Button variant=\"outlined\" className='button-start'\n                                onClick={this.props.toggleAdmin}>\n                                ADMIN MODE</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                From Python to JS is a quick and easy online module will teach you JavaScript, the popular programming language used for the Web.\n                                </span>\n                        </Grid>\n                    </Grid>\n                    :\n                    <Grid container spacing={2} className='h-100'>\n                        <Grid item xs={12} className='d-flex align-items-center'>\n                            <IconButton className='closeButtonMenu ml-auto'\n                                onClick={() => this.props.handleMenu(false)}>\n                                <CloseIcon className='closeIconMenu' />\n                            </IconButton>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                Are you feeling lost? Need some help? Here are some resources to help you learn.\n                            </span>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                <a href='https://www.w3schools.com/js/' target='_blank' rel=\"noopener noreferrer\">01. W3 Schools</a>\n                            </span>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript' target='_blank' rel=\"noopener noreferrer\">02. MDN Web Documents</a>\n                            </span>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span style={{ color: 'white' }}>\n                                Want to continue some other time? Simply key in a unique key and save!\n                            </span>\n                        </Grid>\n\n                        <Grid item xs={12} className='userId-container'>\n                            <label className=\"field a-field a-field_a3\">\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\n                                    onChange={this.handleUserIdChange}\n                                />\n                                <span className=\"a-field__label-wrap\">\n                                    <span className=\"a-field__label\">Enter User ID</span>\n                                </span>\n                            </label>\n                            <div className='d-flex'>\n                                <Button variant=\"outlined\" className='button-start' size='large'\n                                    onClick={this.handleSaveStateCheck}>\n                                    SAVE\n                                </Button>\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\n                                    LOAD\n                                </Button>\n                            </div>\n                        </Grid>\n                    </Grid>\n                }\n            </Menu>\n        )\n\n    }\n}\n\nexport default SliderMenu;\n","import * as firebase from 'firebase';\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCyqp3-1_RgOzY693ucdrQMbK2WIcIUUZk\",\n    authDomain: \"pythontojavascript.firebaseapp.com\",\n    databaseURL: \"https://pythontojavascript.firebaseio.com\",\n    projectId: \"pythontojavascript\",\n    storageBucket: \"pythontojavascript.appspot.com\",\n    messagingSenderId: \"69240043646\",\n    appId: \"1:69240043646:web:1d62b420eda2e45c88802f\",\n    measurementId: \"G-9PH2BQQCT4\"\n};\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);","import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css';\nimport { Container, Col, Row, Alert } from 'react-bootstrap';\n\nimport { QuestionIface } from \"../Form/Question\";\nimport Question from \"../Form/Question\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AceEditor from 'react-ace';\nimport Rating from '@material-ui/lab/Rating';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\n\nimport './QuestionInterface.css'\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n\ntype MyProps = {\n    question: number,\n    showAlert: boolean,\n    isLoading: boolean,\n    feedbackRating: number,\n    questions: QuestionIface[],\n    handleStart: () => void,\n    handleStartOver: () => void,\n    handleNextQuestion: () => void,\n    handlePrevQuestion: () => void,\n    handleCheckAnswer: () => void,\n    toggleComplete: (arg0: boolean) => void,\n    handleClickQuestion: (arg0: number) => void,\n    handleAlertClose: () => void,\n\n};\n\nclass QuestionInterface extends Component<MyProps, {}> {\n\n    renderContent = () => {\n        const questions = this.props.questions;\n        const currQ = this.props.question;\n        switch (currQ) {\n            case 0:\n                return (\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\n                        <Typist className='title-font'>\n                            Learn how to script in JavaScript from Python!\n                        </Typist>\n                        <div className='d-flex align-items-center justify-content-center flex-column'\n                            style={{ marginTop: '25px' }}>\n                            <AceEditor\n                                readOnly={false}\n                                wrapEnabled\n                                height='50vh'\n                                width='70vw'\n                                mode=\"javascript\"\n                                theme=\"monokai\"\n                                name=\"info-section\"\n                                tabSize={0}\n                                editorProps={{\n                                    $blockScrolling: true,\n                                }}\n                                value={questions[currQ].questionText as string}\n                                style={{ maxWidth: 570 }}\n                            />\n                        </div>\n                        <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                            onClick={this.props.handleStart}>\n                            START\n                        </Button>\n                    </div>\n                );\n            case questions.length:\n                return (\n                    <div className='d-flex flex-column align-items-center justify-content-center'>\n                        <Typist className='title-font'>\n                            Congratulations on finishing the course\n                        </Typist>\n                        <p style={{ marginBottom: 0 }}>Please leave us a rating below</p>\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                            <Rating\n                                name=\"simple-controlled\"\n                                value={this.props.feedbackRating}\n                                onChange={(event, newValue) => {\n                                    this.setState({ feedbackRating: newValue })\n                                }}\n                                size=\"large\"\n                                emptyIcon={<StarBorderIcon fontSize=\"inherit\" style={{ color: \"white\" }} />}\n                            />\n                        </Box>\n                        <p>And also help us to complete a feedback form <a\n                            href='https://docs.google.com/forms/d/e/1FAIpQLSfM35tbCqA1qp8Z95il-rWhtXZdLI_3orBRK8onNHISGxbYNQ/viewform?usp=sf_link'\n                            className='feedback-link'>here</a>.</p>\n                        <Button variant=\"outlined\" className='button-start' size='large'\n                            onClick={this.props.handleStartOver}>\n                            START OVER\n                        </Button>\n                    </div>\n                );\n            default:\n                return (\n                    <Question question={questions[currQ]}\n                        index={currQ}\n                        nextQuestion={this.props.handleNextQuestion}\n                        prevQuestion={this.props.handlePrevQuestion}\n                        checkAnswer={this.props.handleCheckAnswer}\n                        lastQuestion={currQ === questions.length - 1}\n                        toggleComplete={this.props.toggleComplete}\n                        isLoading={this.props.isLoading} />\n\n                );\n\n        }\n    };\n\n    render() {\n        const questions = this.props.questions;\n        const currQ = this.props.question;\n        const listQuestions = this.props.questions.map((question, index) => {\n            if (index === 0) {\n                return null;\n            } else {\n                return (\n                    <Tab key={index}\n                        className={`d-flex align-items-center ${question.completed ? \"hover-pointer\" : \"hover-cancel\"}`}\n                        label={\n                            <div className='d-flex align-items-center'>\n                                {/* <CircleIcon style={{color: question.completed ? 'green' : 'red'}}/>*/}\n                                {/* <span style={{marginLeft: 10, color: \"white\"}}>*/}\n                                {/*{question.questionName}*/}\n                                {/*</span>*/}\n                                <div className='question-circle'\n                                    style={{ backgroundColor: index <= currQ || question.completed ? '#007bff' : 'grey' }}\n\n                                >{question.questionName.split(' ')[1]}</div>\n\n                            </div>\n                        }\n                    />);\n            }\n        });\n\n        return (\n            <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\n                id='page-wrap'>\n                {currQ > 0 ?\n                    <Row className='d-flex align-items-center justify-content-center'\n                        style={{ width: '80vw', marginBottom: 15 }}>\n                        <Tabs\n                            value={currQ - 1}\n                            onChange={(e, v) => {\n                                if (questions[v + 1].completed) {\n                                    this.props.handleClickQuestion(v + 1)\n                                }\n                            }}\n                            textColor=\"primary\"\n                            variant='fullWidth'\n                            centered\n                            TabIndicatorProps={\n                                {\n                                    className: 'active-tab',\n                                    style: { display: \"none\" }\n                                }\n                            }\n                        >\n                            {listQuestions}\n                        </Tabs>\n                    </Row> : ''}\n                {this.props.showAlert ?\n                    <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\n                        <Col xs={10}>\n                            {this.props.questions[currQ].completed ?\n                                <Alert variant='success' onClose={this.props.handleAlertClose} dismissible>\n                                    You answered the question correctly! Please move on to the next question.\n                                </Alert> :\n                                <Alert variant='danger' onClose={this.props.handleAlertClose} dismissible>\n                                    Please try again! You can use the hints if you need more help.\n                                </Alert>\n                            }\n                        </Col>\n                    </Row> : ''\n\n                }\n                <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\n                    <Col xs={10}>\n                        {this.renderContent()}\n                    </Col>\n                </Row>\n            </Container>\n\n        );\n    }\n}\n\nexport default QuestionInterface;\n","import { QuestionIface, QuestionType } from \"./components/Form/Question\";\n\nexport const questions: QuestionIface[] =\n    [\n        {\n            questionName: \"\",\n            questionTitle: \"\",\n            questionTutorial: \"\",\n            questionText: \"/*\\n Welcome to From Python to JS. \\n\\n This quick and easy online module will teach you JavaScript, the popular programming language used for the Web. \\n\\n JavaScript is a scripting or programming language that allows you to implement complex things on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, along with HTML and CSS .\\n*/\",\n            answer: \"\",\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 1\",\n            questionTitle: \"Comments\",\n            questionTutorial: \"In JavaScipt, commenting can be done by using: \\n // For single line code \\n /* For multiline code */\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"Replace # with // and ''' with /*\",\n            answer: \"# a one line comment\\n\" +\n                \"\\n\" +\n                \"'''\\n\" +\n                \"this is a longer,\\n\" +\n                \"multi-line comment\\n\" +\n                \"'''\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 2\",\n            questionTitle: \"Declarations\",\n            questionTutorial: \"In JavaScipt, there are three kinds of variable declarations in JS.\\n\" +\n                \"var: Declares a variable, optionally initializing it to a value\\n\" +\n                \"let: Declares a block-scoped, local variable, optionally initializing it to a value\\n\" +\n                \"const: Declares a block-scoped, read-only named constant.\\n\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"x = 42\\n\" +\n                \"y = 13\\n\" +\n                \"x = \\\"forty-two\\\"\\n\" +\n                \"z = \\\"The answer is\\\" + 42\\n\" +\n                \"coffees = ['French Roast', 'Colombian', 'Kona']\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 3\",\n            questionTitle: \"Basic Functions\",\n            questionTutorial: \"In JavaScipt, we first have to declare functions as functions.\\n Also, replace the : with curly braces {}\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"def square(num):\\n      return num * num\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 4\",\n            questionTitle: \"Default Parameters\",\n            questionTutorial: \"In JavaScipt, default parameters allow us to initialize functions with default values.\\n\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"def multiply(a, b=5):\\n\" +\n                \"    b = b if type(b)==int else 1\\n\" +\n                \"    return a * b\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 5\",\n            questionTitle: \"Rest Parameters\",\n            questionTutorial: \"The rest parameter syntax allows us to represent an indefinite number of arguments as an array.\\n\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"def multiply(multiplier, *args):\\n\" +\n                \"    return map(lambda x: multiplier * x, args) \\n\" +\n                \"\\n\" +\n                \"var arr = multiply(2, 1, 2, 3);\\n\" +\n                \"console.log(arr); // [2, 4, 6]\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 6\",\n            questionTitle: \"Control Flow\",\n            questionTutorial: \"Using if-else, define a function odd(x) that returns True when its integer argument is an odd number and False otherwise\\n\" +\n                \"\\n\" +\n                \"function odd(x){\\n\" +\n                \"    return x%2 === 1\\n\" +\n                \"}\\n\" +\n                \"Using switch, write a function getPrice that takes in the name of a fruit and logs the price of the fruit. Oranges are $1, apples are $2, and bananas are $3. If the fruit is none of the 3, log an apology. Sample execution below:\",\n            questionText: \"Please write a switch statement\",\n            hint: \"\",\n            answer: \"getPrice('oranges') // logs \\\"$1\\\"\\n\" +\n                \"getPrice('pears') // logs \\\"Sorry, we are out of pears.\\\"\\n\" +\n                \"function getPrice(fruits) {\\n\" +\n                \"}\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 7\",\n            questionTitle: \"Error Handling\",\n            questionTutorial: \"\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"try:\\n\" +\n                \"    monthName = getMonthName(month) # function could throw exception\\n\" +\n                \"except Exception as e:\\n\" +\n                \"    monthName = 'unknown'\\n\" +\n                \"    logMyErrors(e)\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 8\",\n            questionTitle: \"Loops and Iterations\",\n            questionTutorial: \"The for statement creates a loop that is executed as long as a condition is true.\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"for step in range(5):\\n\" +\n                \"    print(\\\"i am at step: \\\" + step)\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 9\",\n            questionTitle: \"Working with Objects\",\n            questionTutorial: \"Objects are similar to Python dictionaries, they hold a key:value pairing. An example of initialising a object is as shown below:\\n\" +\n                \"var myCar = new Object();\\n\" +\n                \"myCar.make = 'Ford';\\n\" +\n                \"myCar.model = 'Mustang';\\n\" +\n                \"myCar.year = 1969;\",\n            questionText: \"Using a for..in loop, print all the available properties of\",\n            hint: \"\",\n            answer: \"for k in myCar.keys():\\n\" +\n                \"   print (k, myCar[k]) \",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 10\",\n            questionTitle: \"Promises\",\n            questionTutorial: \"Testing\",\n            questionText: \"Please convert the following to JavaScript syntax!\",\n            hint: \"\",\n            answer: \"Haven complete\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.EditableCode\n        },\n        {\n            questionName: \"Task 11\",\n            questionTitle: \"sample mcq question\",\n            questionTutorial: \"answer the following sample mcq question\",\n            questionText: [`what is the capital of china?`, `hong kong`, `taipei`, `beijing`],\n            answer: 3,\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.MultipleChoice\n        },\n        {\n            questionName: \"Task 12\",\n            questionTitle: \"sample checkboxes question\",\n            questionTutorial: \"answer this checkboxes question\",\n            questionText: [`Prof Chris is...?`, `handsome`, `smart`, `charming`],\n            answer: [1, 2, 3],\n            hint: \"\",\n            feedbackText: \"\",\n            completed: false,\n            type: QuestionType.Checkboxes\n        },\n    ]","import React from 'react';\nimport { firebaseApp } from \"../../util/firebase\";\nimport * as firebase from 'firebase';\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Icon from '@mdi/react';\nimport { mdiFacebookBox, mdiGoogle } from '@mdi/js';\nimport history from \"../../history\";\n\nimport './Resume.css'\n\ntype MyProps = {\n    handleSaveState: (arg0: string) => void,\n    handleLoadState: (arg0: string) => void,\n};\n\nclass Resume extends React.Component<MyProps, {}> {\n\n    state = {\n        userId: ''\n    };\n\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ userId: e.target.value });\n    };\n\n    handleSaveStateCheck = () => {\n        if (this.state.userId !== '') {\n            this.props.handleSaveState(this.state.userId)\n        }\n    };\n\n\n    handleFacebook = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        const provider = new firebase.auth.FacebookAuthProvider();\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\n            //console.log('Facebook login success');\n            if (result !== null && result.user !== null && result.user.uid !== null) {\n                this.props.handleLoadState(result.user.uid);\n                history.push('/');\n            }\n        }).catch((error) => {\n            console.log(error);\n        });\n    };\n\n    handleGoogle = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        const provider = new firebase.auth.GoogleAuthProvider();\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\n            //console.log('Google login success');\n            if (result !== null && result.user !== null && result.user.uid !== null) {\n                this.props.handleLoadState(result.user.uid);\n                history.push('/');\n\n            }\n        }).catch((error) => {\n            console.log(error);\n        });\n    };\n\n    render() {\n        return (\n            <div style={{ width: 425 }}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <span style={{ color: 'white', textAlign: \"center\", fontWeight: 'bold' }}>\n                            Type in your past user ID to continue or login to save your progress\n                        </span>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <div className='w-100'>\n                            <label className=\"field a-field a-field_a3\">\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\n                                    onChange={this.handleUserIdChange}\n                                />\n                                <span className=\"a-field__label-wrap\">\n                                    <span className=\"a-field__label\">Enter User ID</span>\n                                </span>\n                            </label>\n                            <div className='d-flex'>\n                                <Button variant=\"outlined\" className='button-start' size='large'\n                                    onClick={this.handleSaveStateCheck}>\n                                    SAVE\n                                </Button>\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\n                                    LOAD\n                                </Button>\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <Button variant=\"outlined\" onClick={this.handleFacebook} className='resume-auth' fullWidth>\n                            <span><Icon path={mdiFacebookBox} size={1} style={{ fill: 'white' }} /> Facebook</span>\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\n                        <Button variant=\"outlined\" onClick={this.handleGoogle} className='resume-auth' fullWidth>\n                            <span><Icon path={mdiGoogle} size={1} style={{ fill: 'white' }} /> Google</span>\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default Resume;\n\n","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport {Router, Route, Switch} from 'react-router-dom';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from \"@material-ui/core/Slide\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport NavBar from \"./components/Navigation/NavBar\";\nimport SliderMenu from \"./components/Navigation/SliderMenu\";\nimport axios from \"axios\";\nimport {firebaseApp} from './util/firebase';\nimport history from \"./history\";\n\nimport QuestionInterface from './components/Question/QuestionInterface'\n\nimport './App.css';\nimport {questions} from \"./QuestionList\";\nimport Resume from \"./components/Resume/Resume\";\n\nexport interface BackendResponse {\n    data: {\n        htmlFeedback: string;\n        isComplete: boolean;\n        jsonFeedback: any;\n        textFeedback: string;\n    }\n};\n\nclass App extends Component {\n\n    state = {\n        openMenu: false,\n        question: 0, // idx of current question that user is on\n        returnedData: null,\n        questions: questions,\n        feedbackRating: 0, // feedback rating out of 5\n        isLoading: false,\n        showAlert: false,\n        showSnackBar: false,\n        loggedIn:false,\n        uid:'',\n    };\n\n    componentDidMount(): void {\n        firebaseApp.auth().onAuthStateChanged(user => {\n            if (user) {\n                let currentuser = firebaseApp.auth().currentUser;\n                if (currentuser !== null){\n                    this.setState({\n                        uid: currentuser.uid,\n                        username: currentuser.displayName,\n                        loggedIn: true,\n                    });\n                }\n            } else {\n                this.setState({loggedIn: false})\n            }\n        });\n    }\n\n    handleMenu = (isOpen: boolean) => {\n        this.setState({openMenu: isOpen})\n    };\n\n\n    handleClickQuestion = (i: number) => {\n        this.setState({\n            openMenu: false,\n            question: i,\n            showAlert: false,\n        });\n    };\n\n    handleMenuStateChange = (state: any) => {\n        this.setState({openMenu: state.isOpen})\n    };\n\n    handleStart = () => {\n        history.push('/');\n        this.setState({question: 1, openMenu: false,})\n    };\n\n    handleNextQuestion = () => {\n        this.setState({question: this.state.question + 1, showAlert: false})\n    };\n\n    handlePrevQuestion = () => {\n        this.setState({question: this.state.question - 1, showAlert: false})\n    };\n    handleAlertClose = () => {\n        this.setState({showAlert: false})\n    };\n\n    handleStartOver = () => {\n        // TODO clear progress of app\n        this.setState({question: 0})\n    };\n\n    handleCheckAnswer = async () => {\n        //Add in fetch nonsense\n        this.setState({isLoading: true});\n        let gatewayURL = \"https://cl8r4dbpqe.execute-api.us-east-1.amazonaws.com/Prod/\";\n        let questionURL = gatewayURL + `?question=${this.state.question}`;\n        let answer = {\n            \"userToken\": \"ABCDE\",\n            \"shown\": {\n                \"0\": `//main.spec.js \\nconst app = require(\"./main\");\\ndescribe(\"Load app from main.js\", () => {\\n    it(\"works\", () => {\\nexpect(true).toBeTruthy();\\n    }); \\n});`\n            },\n            \"editable\": {\n                \"0\": this.state.questions[this.state.question].answer\n            },\n            \"hidden\": {\n                \"0\": `{\\n\"scripts\":{ \"test\":\"jest\" }\\n}`,\n            }\n        };\n        try {\n            const res: BackendResponse = await axios.post(questionURL, {...answer}, {\n                headers: {\n                    Accept: 'application/json',\n                }\n            });\n            console.log(res);\n            let questions = this.state.questions;\n            questions[this.state.question].completed = res.data.isComplete;\n            questions[this.state.question].feedbackText = res.data.textFeedback;\n            // questions[this.state.question].completed = true;\n            this.setState({questions: questions});\n            if (this.state.loggedIn){\n                this.handleSaveState(this.state.uid)\n            }\n        } catch (err) {\n            console.log(err);\n        } finally {\n            this.setState({isLoading: false, showAlert: true});\n        }\n\n    };\n\n    handleSaveState = (name: string) => {\n        let data = {\n            questions: this.state.questions,\n            userId: name,\n            feedbackRating: this.state.feedbackRating,\n        };\n        firebaseApp.database().ref(`/userdata/${name}`).update(data)\n    };\n\n    handleLoadState = (name: string) => {\n        let db = firebaseApp.database().ref(`/userdata/${name}`);\n        db.once('value').then((snapshot) => {\n            const data = snapshot.val();\n            if (data !== null){\n                let questions = Object.values(data.questions);\n                // console.log(questions)\n                this.setState({\n                    questions: questions,\n                    feedbackRating: data.feedbackRating,\n                    showSnackBar: true,\n                    openMenu: false\n                });\n                window.setTimeout(() => {\n                    this.setState({showSnackBar: false})\n                }, 3000)\n            }\n        }).catch(err => {\n            console.log(err);\n        });\n    };\n\n    toggleAdmin = () => {\n        const pw = prompt('Please enter password');\n        if (pw === \"richu\") {\n            const questions = this.state.questions;\n            questions.forEach(q => {\n                q.completed = true;\n            });\n            history.push('/');\n            this.setState({questions: questions})\n        }\n    };\n\n    toggleComplete = (isComplete: boolean) => {\n        let questions = this.state.questions;\n        questions[this.state.question].completed = isComplete;\n        this.setState({questions: questions})\n    };\n\n    handleCloseSnackBar = () => {\n        this.setState({showSnackBar: false})\n    };\n\n    SlideTransition = (props: any) => {\n        return <Slide {...props} direction=\"up\"/>\n    };\n\n\n    render() {\n        const currQ = this.state.question;\n        return (\n            <div className=\"App\">\n                <SliderMenu open={this.state.openMenu} handleMenu={this.handleMenu}\n                            handleMenuStateChange={this.handleMenuStateChange}\n                            handleClickQuestion={this.handleClickQuestion}\n                            handleStart={this.handleStart}\n                            questions={this.state.questions}\n                            question={currQ}\n                            toggleAdmin={this.toggleAdmin}\n                            handleSaveState={this.handleSaveState}\n                            handleLoadState={this.handleLoadState}\n                />\n                <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\n                           id='page-wrap'>\n                    <NavBar handleMenu={this.handleMenu}/>\n                    <Router history={history}>\n                        <Switch>\n                            <Route exact path=\"/\"\n                                   render={(props) => <QuestionInterface {...props} questions={this.state.questions}\n                                                                         question={currQ} handleStart={this.handleStart}\n                                                                         feedbackRating={this.state.feedbackRating}\n                                                                         handleStartOver={this.handleStartOver}\n                                                                         showAlert={this.state.showAlert}\n                                                                         handleNextQuestion={this.handleNextQuestion}\n                                                                         handlePrevQuestion={this.handlePrevQuestion}\n                                                                         handleCheckAnswer={this.handleCheckAnswer}\n                                                                         toggleComplete={this.toggleComplete}\n                                                                         isLoading={this.state.isLoading}\n                                                                         handleAlertClose={this.handleAlertClose}\n                                                                         handleClickQuestion={this.handleClickQuestion}\n\n                                   />}/>\n                            <Route exact path='/load' render={(props) => <Resume {...props}\n                                                                                handleSaveState={this.handleSaveState}\n                                                                                handleLoadState={this.handleLoadState}\n                            />}/>\n                        </Switch>\n                    </Router>\n                    <Snackbar anchorOrigin={{horizontal: 'right', vertical: 'bottom'}}\n                              open={this.state.showSnackBar}\n                              message={<span id=\"message-id\">Profile has been successfully loaded.</span>}\n                              action={\n                                  <IconButton\n                                      key=\"close\"\n                                      color=\"inherit\"\n                                      onClick={this.handleCloseSnackBar}\n                                  >\n                                      <CloseIcon/>\n                                  </IconButton>\n                              }\n                              TransitionComponent={this.SlideTransition}\n                    />\n                </Container>\n            </div>\n        )\n            ;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}