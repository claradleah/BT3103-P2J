{"version":3,"sources":["components/Form/Question.tsx","components/Navigation/NavBar.tsx","components/Navigation/SliderMenu.tsx","util/firebase.tsx","components/Question/QuestionInterface.tsx","QuestionList.tsx","components/Resume/Resume.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["QuestionType","NavBar","Navbar","fixed","IconButton","style","color","onClick","props","handleMenu","fontSize","React","Component","SliderMenu","state","userId","handleUserIdChange","e","setState","target","value","handleSaveStateCheck","handleSaveState","handleResume","history","push","pageWrapId","outerContainerId","isOpen","this","open","onStateChange","handleMenuStateChange","className","question","questions","length","Grid","container","spacing","item","xs","Button","variant","size","handleStart","toggleAdmin","Divider","backgroundColor","href","rel","placeholder","onChange","handleLoadState","withRouter","firebaseApp","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Question","handleAnswerChange","newValue","answer","checkMCQAns","i","toggleComplete","checkCheckboxesAns","expected","Set","as","bs","a","has","eqSet","selected","handleCheckboxAnsChange","event","checked","add","delete","renderQuestion","type","EditableCode","renderEditableCode","MultipleChoice","renderMCQ","Checkboxes","renderCheckboxes","qn","questionText","options","key","Row","rows","text","Col","Container","fluid","lineHeight","questionTutorial","split","map","marginBottom","marginRight","OverlayTrigger","placement","overlay","Tooltip","id","hint","wrapEnabled","height","width","mode","theme","name","tabSize","editorProps","$blockScrolling","dangerouslySetInnerHTML","__html","feedbackText","questionName","questionTitle","prevQuestion","isLoading","CircularProgress","checkAnswer","nextQuestion","marginLeft","disabled","completed","lastQuestion","QuestionInterface","renderContent","currQ","marginTop","readOnly","maxWidth","Box","component","mb","borderColor","Rating","feedbackRating","emptyIcon","handleStartOver","index","handleNextQuestion","handlePrevQuestion","handleCheckAnswer","listQuestions","Tab","label","Tabs","v","handleClickQuestion","textColor","centered","TabIndicatorProps","display","showAlert","Alert","onClose","handleAlertClose","dismissible","testCode","Resume","handleFacebook","preventDefault","provider","FacebookAuthProvider","auth","signInWithPopup","then","result","user","uid","catch","error","console","log","handleGoogle","GoogleAuthProvider","textAlign","fontWeight","fullWidth","path","mdiFacebookBox","fill","mdiGoogle","App","openMenu","returnedData","showSnackBar","loggedIn","questionURL","axios","post","headers","Accept","res","data","isComplete","htmlFeedback","database","ref","update","once","snapshot","val","Object","values","window","setTimeout","err","prompt","forEach","q","handleCloseSnackBar","SlideTransition","Slide","direction","onAuthStateChanged","currentuser","currentUser","username","displayName","exact","render","Snackbar","anchorOrigin","horizontal","vertical","message","action","TransitionComponent","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea18ad9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Question.css';\r\nimport AceEditor from \"react-ace\";\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Container, Col, Row, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport HelpIcon from '@material-ui/icons/HelpOutline';\r\n\r\nexport interface QuestionIface {\r\n    questionName: string,\r\n    questionTitle: string,\r\n    questionTutorial: string,\r\n    questionText: string | string[],\r\n    hint: string,\r\n    answer: string | number | number[],\r\n    feedbackText: string,\r\n    completed: boolean,\r\n    type: QuestionType,\r\n    testCode: string,\r\n}\r\n\r\nexport enum QuestionType {\r\n    EditableCode, // qn with editable code that can run\r\n    MultipleChoice, // mcq\r\n    Checkboxes // select all that applies\r\n}\r\n\r\ntype MyProps = {\r\n    lastQuestion: boolean,\r\n    isLoading: boolean,\r\n    index: number,\r\n    question: QuestionIface,\r\n    nextQuestion: () => void,\r\n    prevQuestion: () => void,\r\n    checkAnswer: () => void,\r\n    toggleComplete: (arg0: boolean) => void,\r\n};\r\n\r\nclass Question extends React.Component<MyProps, { selected: Set<number> }> {\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = { selected: new Set() };\r\n    }\r\n\r\n    handleAnswerChange = (newValue: string) => {\r\n        this.props.question.answer = newValue;\r\n    };\r\n\r\n    checkMCQAns = (i: number) => {\r\n        this.props.toggleComplete(i === (this.props.question.answer as number));\r\n    };\r\n\r\n    checkCheckboxesAns = () => {\r\n        const expected = new Set(this.props.question.answer as number[]);\r\n        this.props.toggleComplete(eqSet(expected, this.state.selected));\r\n    };\r\n\r\n    handleCheckboxAnsChange = (event: any, i: number) => {\r\n        let selected = this.state.selected;\r\n        if (event.target.checked) {\r\n            selected.add(i);\r\n        } else {\r\n            selected.delete(i);\r\n        }\r\n        this.setState({ selected: selected });\r\n    };\r\n\r\n    renderQuestion = () => {\r\n        switch (this.props.question.type) {\r\n            case QuestionType.EditableCode:\r\n                return this.renderEditableCode();\r\n            case QuestionType.MultipleChoice:\r\n                return this.renderMCQ();\r\n            case QuestionType.Checkboxes:\r\n                return this.renderCheckboxes();\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    renderCheckboxes = () => {\r\n        const qn = this.props.question.questionText as string[];\r\n        let options = [];\r\n        for (let i = 1; i < qn.length; i++) {\r\n            options.push(\r\n                <label key={i}>\r\n                    {qn[i]}\r\n                    <input type='checkbox' onChange={(e) => this.handleCheckboxAnsChange(e, i)} />\r\n                    <br />\r\n                </label>\r\n            )\r\n        }\r\n        return (\r\n            <Row className='w-100'>\r\n                <div><p className='question-instruction'><strong>{qn[0]}</strong></p></div>\r\n                <div>{options}</div>\r\n                <Button className='button-start' onClick={this.checkCheckboxesAns}> Check answer </Button>\r\n            </Row>\r\n        )\r\n    };\r\n\r\n    renderMCQ = () => {\r\n        const qn = this.props.question.questionText as string[];\r\n        let rows = [];\r\n        for (let i = 1; i < qn.length; i++) {\r\n            const text = qn[i]\r\n            rows.push(\r\n                <li onClick={() => this.checkMCQAns(i)}><span>{text}</span></li>\r\n            );\r\n        }\r\n        return (\r\n            <Row className='w-100'>\r\n                <p className='question-instruction'><strong>{qn[0]}</strong></p>\r\n                <ul>{rows}</ul>\r\n            </Row>\r\n        );\r\n    };\r\n\r\n    renderEditableCode = () => {\r\n        return (\r\n            <Row className='w-100'>\r\n                <Col>\r\n                    <Container fluid className='h-100'>\r\n                        <Row className='h-50'>\r\n                            <div style={{ lineHeight: 1 }}>\r\n                                <h6>Instructions:</h6>\r\n                                {this.props.question.questionTutorial.split('\\n').map(function (item, key) {\r\n                                    return (\r\n                                        <span key={key} className='question-font'>\r\n                                            {item}\r\n                                            <br />\r\n                                        </span>)\r\n                                })}\r\n                            </div>\r\n                        </Row>\r\n                        <Row className='d-flex flex-column h-50'>\r\n                            <h6>Output:</h6>\r\n                            <div className='output-box'>\r\n                                <p className='feedback-text-font'></p>\r\n                            </div>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n                <Col>\r\n                    <div className='d-flex align-items-center ' style={{ marginBottom: 10 }}>\r\n                        <p className='question-instruction'><strong>{this.props.question.questionText}</strong></p>\r\n                        <div className='ml-auto' style={{ marginRight: 10 }}>\r\n                            <OverlayTrigger\r\n                                key='bottom'\r\n                                placement='bottom'\r\n                                overlay={\r\n                                    <Tooltip id='hint'>\r\n                                        {this.props.question.hint}\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <HelpIcon />\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    </div>\r\n                    <AceEditor\r\n                        wrapEnabled\r\n                        height='40vh'\r\n                        width='100%'\r\n                        mode=\"javascript\"\r\n                        theme=\"monokai\"\r\n                        name=\"answerInput\"\r\n                        onChange={this.handleAnswerChange}\r\n                        tabSize={4}\r\n                        editorProps={{\r\n                            $blockScrolling: true,\r\n                        }}\r\n                        value={this.props.question.answer as string}\r\n                    />\r\n                </Col>\r\n                <div dangerouslySetInnerHTML={{ __html: this.props.question.feedbackText }} />\r\n            </Row>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container className='d-flex align-items-center justify-content-center flex-column'>\r\n                <Row>\r\n                    <h3 className='question-title'>{this.props.question.questionName}: {this.props.question.questionTitle}</h3>\r\n                </Row>\r\n                {this.renderQuestion()}\r\n                <Row className='d-flex w-100'>\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                        onClick={this.props.prevQuestion}>\r\n                        PREVIOUS\r\n                    </Button>\r\n                    {/*<div className='d-flex align-items-center justify-content-center progress-bar-container'>*/}\r\n                    {/*    <ProgressBar variant=\"success\" now={this.props.index * 10} style={{ width: 150 }} />*/}\r\n                    {/*    <span className='question-instruction' style={{ marginLeft: 20 }}>{this.props.index}/?? Questions</span>*/}\r\n                    {/*</div>*/}\r\n                    {this.props.isLoading ?\r\n                        <CircularProgress className='loading-color ml-auto' />\r\n                        : <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                            onClick={this.props.checkAnswer}>\r\n                            RUN\r\n                        </Button>}\r\n                    <Button variant=\"outlined\" className='button-start' size='large'\r\n                        onClick={this.props.nextQuestion} style={{ marginLeft: 10 }}\r\n                        disabled={!this.props.question.completed}\r\n                    >\r\n                        {this.props.lastQuestion ? \"Finish\" : 'NEXT'}\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// determines if 2 sets are equal. https://stackoverflow.com/a/31129384\r\nfunction eqSet(as: Set<any>, bs: Set<any>) {\r\n    if (as.size !== bs.size) return false;\r\n    for (var a of as) if (!bs.has(a)) return false;\r\n    return true;\r\n}\r\n\r\nexport default Question;\r\n\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/MenuRounded';\r\nimport React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\n\r\ntype MyProps = {\r\n    handleMenu: (arg0: boolean) => void,\r\n};\r\nclass NavBar extends React.Component<MyProps, {}> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Navbar fixed='top'>\r\n                <IconButton style={{ color: \"white\" }} onClick={() => this.props.handleMenu(true)}>\r\n                    <MenuIcon fontSize='large' />\r\n                </IconButton>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React from 'react';\r\nimport { push as Menu, State } from \"react-burger-menu\";\r\nimport './SliderMenu.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { QuestionIface } from \"../Form/Question\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\ntype MyProps = RouteComponentProps & {\r\n    open: boolean,\r\n    question: number,\r\n    questions: QuestionIface[],\r\n    handleMenu: (arg0: boolean) => void,\r\n    handleClickQuestion: (arg0: number) => void,\r\n    handleMenuStateChange: (arg0: State) => void,\r\n    handleSaveState: (arg0: string) => void,\r\n    handleLoadState: (arg0: string) => void,\r\n    handleStart: () => void,\r\n    toggleAdmin: () => void,\r\n};\r\n\r\nclass SliderMenu extends React.Component<MyProps, {}> {\r\n\r\n    state = {\r\n        userId: ''\r\n    };\r\n\r\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ userId: e.target.value });\r\n    };\r\n\r\n    handleSaveStateCheck = () => {\r\n        if (this.state.userId !== '') {\r\n            this.props.handleSaveState(this.state.userId)\r\n        }\r\n    };\r\n\r\n    handleResume = () => {\r\n        this.props.history.push('/load');\r\n        this.props.handleMenu(false);\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Menu pageWrapId={\"page-wrap\"} outerContainerId={\"root\"}\r\n                isOpen={this.props.open}\r\n                onStateChange={(state) => this.props.handleMenuStateChange(state)}\r\n                className='menu-width'\r\n            >\r\n                {this.props.question === 0 || this.props.question === (this.props.questions.length) ?\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} className='d-flex align-items-center'>\r\n                            <IconButton className='closeButtonMenu ml-auto'\r\n                                onClick={() => this.props.handleMenu(false)}>\r\n                                <CloseIcon className='closeIconMenu' />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                            <Button variant=\"outlined\" className='button-start' size='large'\r\n                                onClick={this.props.handleStart}>\r\n                                START\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n\r\n                            <Button variant=\"outlined\" className='button-start'\r\n                                onClick={this.handleResume}>\r\n                                RESUME\r\n                                </Button>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                            <Button variant=\"outlined\" className='button-start'\r\n                                onClick={this.props.toggleAdmin}>\r\n                                ADMIN MODE</Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <span style={{ color: 'white' }}>\r\n                                From Python to JS is a quick and easy online module will teach you JavaScript, the popular programming language used for the Web.\r\n                                </span>\r\n                        </Grid>\r\n                    </Grid>\r\n                    :\r\n                    <Grid container spacing={2} className='h-100'>\r\n                        <Grid item xs={12} className='d-flex align-items-center'>\r\n                            <IconButton className='closeButtonMenu ml-auto'\r\n                                onClick={() => this.props.handleMenu(false)}>\r\n                                <CloseIcon className='closeIconMenu' />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <span style={{ color: 'white' }}>\r\n                                Are you feeling lost? Need some help? Here are some resources to help you learn.\r\n                            </span>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <span style={{ color: 'white' }}>\r\n                                <a href='https://www.w3schools.com/js/' target='_blank' rel=\"noopener noreferrer\">01. W3 Schools</a>\r\n                            </span>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <span style={{ color: 'white' }}>\r\n                                <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript' target='_blank' rel=\"noopener noreferrer\">02. MDN Web Documents</a>\r\n                            </span>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Divider variant='middle' style={{ backgroundColor: '#fff' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <span style={{ color: 'white' }}>\r\n                                Want to continue some other time? Simply key in a unique key and save!\r\n                            </span>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} className='userId-container'>\r\n                            <label className=\"field a-field a-field_a3\">\r\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\r\n                                    onChange={this.handleUserIdChange}\r\n                                />\r\n                                <span className=\"a-field__label-wrap\">\r\n                                    <span className=\"a-field__label\">Enter User ID</span>\r\n                                </span>\r\n                            </label>\r\n                            <div className='d-flex'>\r\n                                <Button variant=\"outlined\" className='button-start' size='large'\r\n                                    onClick={this.handleSaveStateCheck}>\r\n                                    SAVE\r\n                                </Button>\r\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\r\n                                    LOAD\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </Menu>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter(SliderMenu);\r\n","import * as firebase from 'firebase';\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCyqp3-1_RgOzY693ucdrQMbK2WIcIUUZk\",\r\n    authDomain: \"pythontojavascript.firebaseapp.com\",\r\n    databaseURL: \"https://pythontojavascript.firebaseio.com\",\r\n    projectId: \"pythontojavascript\",\r\n    storageBucket: \"pythontojavascript.appspot.com\",\r\n    messagingSenderId: \"69240043646\",\r\n    appId: \"1:69240043646:web:1d62b420eda2e45c88802f\",\r\n    measurementId: \"G-9PH2BQQCT4\"\r\n};\r\n\r\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);","import React, { Component } from 'react';\r\nimport Typist from 'react-typist';\r\nimport 'react-typist/dist/Typist.css';\r\nimport { Container, Col, Row, Alert } from 'react-bootstrap';\r\n\r\nimport { QuestionIface } from \"../Form/Question\";\r\nimport Question from \"../Form/Question\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport AceEditor from 'react-ace';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/monokai';\r\n\r\nimport './QuestionInterface.css'\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\n\r\ntype MyProps = {\r\n    question: number,\r\n    showAlert: boolean,\r\n    isLoading: boolean,\r\n    feedbackRating: number,\r\n    questions: QuestionIface[],\r\n    handleStart: () => void,\r\n    handleStartOver: () => void,\r\n    handleNextQuestion: () => void,\r\n    handlePrevQuestion: () => void,\r\n    handleCheckAnswer: () => void,\r\n    toggleComplete: (arg0: boolean) => void,\r\n    handleClickQuestion: (arg0: number) => void,\r\n    handleAlertClose: () => void,\r\n\r\n};\r\n\r\nclass QuestionInterface extends Component<MyProps, {}> {\r\n\r\n    renderContent = () => {\r\n        const questions = this.props.questions;\r\n        const currQ = this.props.question;\r\n        switch (currQ) {\r\n            case 0:\r\n                return (\r\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\r\n                        <Typist className='title-font'>\r\n                            Learn how to script in JavaScript from Python!\r\n                        </Typist>\r\n                        <div className='d-flex align-items-center justify-content-center flex-column'\r\n                            style={{ marginTop: '25px' }}>\r\n                            <AceEditor\r\n                                readOnly={false}\r\n                                wrapEnabled\r\n                                height='50vh'\r\n                                width='70vw'\r\n                                mode=\"javascript\"\r\n                                theme=\"monokai\"\r\n                                name=\"info-section\"\r\n                                tabSize={0}\r\n                                editorProps={{\r\n                                    $blockScrolling: true,\r\n                                }}\r\n                                value={questions[currQ].questionText as string}\r\n                                style={{ maxWidth: 570 }}\r\n                            />\r\n                        </div>\r\n                        <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                            onClick={this.props.handleStart}>\r\n                            START\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            case questions.length:\r\n                return (\r\n                    <div className='d-flex flex-column align-items-center justify-content-center'>\r\n                        <Typist className='title-font'>\r\n                            Congratulations on finishing the course\r\n                        </Typist>\r\n                        <p style={{ marginBottom: 0 }}>Please leave us a rating below</p>\r\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                            <Rating\r\n                                name=\"simple-controlled\"\r\n                                value={this.props.feedbackRating}\r\n                                onChange={(event, newValue) => {\r\n                                    this.setState({ feedbackRating: newValue })\r\n                                }}\r\n                                size=\"large\"\r\n                                emptyIcon={<StarBorderIcon fontSize=\"inherit\" style={{ color: \"white\" }} />}\r\n                            />\r\n                        </Box>\r\n                        <p>And also help us to complete a feedback form <a\r\n                            href='https://docs.google.com/forms/d/e/1FAIpQLSfM35tbCqA1qp8Z95il-rWhtXZdLI_3orBRK8onNHISGxbYNQ/viewform?usp=sf_link'\r\n                            className='feedback-link'>here</a>.</p>\r\n                        <Button variant=\"outlined\" className='button-start' size='large'\r\n                            onClick={this.props.handleStartOver}>\r\n                            START OVER\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <Question question={questions[currQ]}\r\n                        index={currQ}\r\n                        nextQuestion={this.props.handleNextQuestion}\r\n                        prevQuestion={this.props.handlePrevQuestion}\r\n                        checkAnswer={this.props.handleCheckAnswer}\r\n                        lastQuestion={currQ === questions.length - 1}\r\n                        toggleComplete={this.props.toggleComplete}\r\n                        isLoading={this.props.isLoading} />\r\n\r\n                );\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const questions = this.props.questions;\r\n        const currQ = this.props.question;\r\n        const listQuestions = this.props.questions.map((question, index) => {\r\n            if (index === 0) {\r\n                return null;\r\n            } else {\r\n                return (\r\n                    <Tab key={index}\r\n                        className={`d-flex align-items-center ${question.completed ? \"hover-pointer\" : \"hover-cancel\"}`}\r\n                        label={\r\n                            <div className='d-flex align-items-center'>\r\n                                {/* <CircleIcon style={{color: question.completed ? 'green' : 'red'}}/>*/}\r\n                                {/* <span style={{marginLeft: 10, color: \"white\"}}>*/}\r\n                                {/*{question.questionName}*/}\r\n                                {/*</span>*/}\r\n                                <div className='question-circle'\r\n                                    style={{ backgroundColor: index <= currQ || question.completed ? '#007bff' : 'grey' }}\r\n\r\n                                >{question.questionName.split(' ')[1]}</div>\r\n\r\n                            </div>\r\n                        }\r\n                    />);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\r\n                id='page-wrap'>\r\n                {currQ > 0 ?\r\n                    <Row className='d-flex align-items-center justify-content-center'\r\n                        style={{ width: '80vw', marginBottom: 15 }}>\r\n                        <Tabs\r\n                            value={currQ - 1}\r\n                            onChange={(e, v) => {\r\n                                if (questions[v + 1].completed) {\r\n                                    this.props.handleClickQuestion(v + 1)\r\n                                }\r\n                            }}\r\n                            textColor=\"primary\"\r\n                            variant='fullWidth'\r\n                            centered\r\n                            TabIndicatorProps={\r\n                                {\r\n                                    className: 'active-tab',\r\n                                    style: { display: \"none\" }\r\n                                }\r\n                            }\r\n                        >\r\n                            {listQuestions}\r\n                        </Tabs>\r\n                    </Row> : ''}\r\n                {this.props.showAlert ?\r\n                    <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\r\n                        <Col xs={10}>\r\n                            {this.props.questions[currQ].completed ?\r\n                                <Alert variant='success' onClose={this.props.handleAlertClose} dismissible>\r\n                                    You answered the question correctly! Please move on to the next question.\r\n                                </Alert> :\r\n                                <Alert variant='danger' onClose={this.props.handleAlertClose} dismissible>\r\n                                    Please try again! You can use the hints if you need more help.\r\n                                </Alert>\r\n                            }\r\n                        </Col>\r\n                    </Row> : ''\r\n\r\n                }\r\n                <Row className='d-flex align-items-center justify-content-center' style={{ width: '80vw' }}>\r\n                    <Col xs={10}>\r\n                        {this.renderContent()}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionInterface;\r\n","import { QuestionIface, QuestionType } from \"./components/Form/Question\";\r\n\r\nexport const questions: QuestionIface[] =\r\n    [\r\n        {\r\n            questionName: \"\",\r\n            questionTitle: \"\",\r\n            questionTutorial: \"\",\r\n            questionText: \"/*\\n Welcome to From Python to JS. \\n\\n This quick and easy online module will teach you JavaScript, the popular programming language used for the Web. \\n\\n JavaScript is a scripting or programming language that allows you to implement complex things on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies, along with HTML and CSS .\\n*/\",\r\n            answer: \"\",\r\n            hint: \"\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: ``\r\n        },\r\n        {\r\n            questionName: \"Task 1\",\r\n            questionTitle: \"Comments\",\r\n            questionTutorial: \"In JavaScipt, commenting can be done by using: \\n // For single line code \\n /* For multiline code */\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"Replace # with // and ''' with /*\",\r\n            answer: \"# a one line comment\\n\" +\r\n                \"\\n\" +\r\n                \"'''\\n\" +\r\n                \"this is a longer,\\n\" +\r\n                \"multi-line comment\\n\" +\r\n                \"'''\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 2\",\r\n            questionTitle: \"Declarations\",\r\n            questionTutorial: \"In JavaScipt, there are three kinds of variable declarations in JS.\\n\" +\r\n                \"var: Declares a variable, optionally initializing it to a value\\n\" +\r\n                \"let: Declares a block-scoped, local variable, optionally initializing it to a value\\n\" +\r\n                \"const: Declares a block-scoped, read-only named constant.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: `x = 42\r\ny = 13\r\nx = \"forty-two\"\r\nz = \"The answer is\" + 42\r\ncoffees = ['French Roast', 'Colombian', 'Kona']\r\n`,\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"task2\", () => {\r\n    expect(app.x).toBe(42);\r\n    expect(app.y).toBe(13);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 3\",\r\n            questionTitle: \"Basic Functions\",\r\n            questionTutorial: \"In JavaScipt, we first have to declare functions as functions.\\n Also, replace the : with curly braces {}\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"def square(num):\\n      return num * num\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 4\",\r\n            questionTitle: \"Default Parameters\",\r\n            questionTutorial: \"In JavaScipt, default parameters allow us to initialize functions with default values.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"def multiply(a, b=5):\\n\" +\r\n                \"    b = b if type(b)==int else 1\\n\" +\r\n                \"    return a * b\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 5\",\r\n            questionTitle: \"Rest Parameters\",\r\n            questionTutorial: \"The rest parameter syntax allows us to represent an indefinite number of arguments as an array.\\n\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"def multiply(multiplier, *args):\\n\" +\r\n                \"    return map(lambda x: multiplier * x, args) \\n\" +\r\n                \"\\n\" +\r\n                \"var arr = multiply(2, 1, 2, 3);\\n\" +\r\n                \"console.log(arr); // [2, 4, 6]\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 6\",\r\n            questionTitle: \"Control Flow\",\r\n            questionTutorial: \"Using if-else, define a function odd(x) that returns True when its integer argument is an odd number and False otherwise\\n\" +\r\n                \"\\n\" +\r\n                \"function odd(x){\\n\" +\r\n                \"    return x%2 === 1\\n\" +\r\n                \"}\\n\" +\r\n                \"Using switch, write a function getPrice that takes in the name of a fruit and logs the price of the fruit. Oranges are $1, apples are $2, and bananas are $3. If the fruit is none of the 3, log an apology. Sample execution below:\",\r\n            questionText: \"Please write a switch statement\",\r\n            hint: \"\",\r\n            answer: \"getPrice('oranges') // logs \\\"$1\\\"\\n\" +\r\n                \"getPrice('pears') // logs \\\"Sorry, we are out of pears.\\\"\\n\" +\r\n                \"function getPrice(fruits) {\\n\" +\r\n                \"}\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 7\",\r\n            questionTitle: \"Error Handling\",\r\n            questionTutorial: \"\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"try:\\n\" +\r\n                \"    monthName = getMonthName(month) # function could throw exception\\n\" +\r\n                \"except Exception as e:\\n\" +\r\n                \"    monthName = 'unknown'\\n\" +\r\n                \"    logMyErrors(e)\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 8\",\r\n            questionTitle: \"Loops and Iterations\",\r\n            questionTutorial: \"The for statement creates a loop that is executed as long as a condition is true.\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"for step in range(5):\\n\" +\r\n                \"    print(\\\"i am at step: \\\" + step)\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 9\",\r\n            questionTitle: \"Working with Objects\",\r\n            questionTutorial: \"Objects are similar to Python dictionaries, they hold a key:value pairing. An example of initialising a object is as shown below:\\n\" +\r\n                \"var myCar = new Object();\\n\" +\r\n                \"myCar.make = 'Ford';\\n\" +\r\n                \"myCar.model = 'Mustang';\\n\" +\r\n                \"myCar.year = 1969;\",\r\n            questionText: \"Using a for..in loop, print all the available properties of\",\r\n            hint: \"\",\r\n            answer: \"for k in myCar.keys():\\n\" +\r\n                \"   print (k, myCar[k]) \",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 10\",\r\n            questionTitle: \"Promises\",\r\n            questionTutorial: \"Testing\",\r\n            questionText: \"Please convert the following to JavaScript syntax!\",\r\n            hint: \"\",\r\n            answer: \"Haven complete\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.EditableCode,\r\n            testCode: `\r\n//main.spec.js\r\nconst app = require(\"./main\");\r\ntest(\"default\", () => {\r\n    expect(1).toBe(1);\r\n});`\r\n        },\r\n        {\r\n            questionName: \"Task 11\",\r\n            questionTitle: \"sample mcq question\",\r\n            questionTutorial: \"answer the following sample mcq question\",\r\n            questionText: [`what is the capital of china?`, `hong kong`, `taipei`, `beijing`],\r\n            answer: 3,\r\n            hint: \"\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.MultipleChoice,\r\n            testCode: ``\r\n        },\r\n        {\r\n            questionName: \"Task 12\",\r\n            questionTitle: \"sample checkboxes question\",\r\n            questionTutorial: \"answer this checkboxes question\",\r\n            questionText: [`Prof Chris is...?`, `handsome`, `smart`, `charming`],\r\n            answer: [1, 2, 3],\r\n            hint: \"\",\r\n            feedbackText: \"\",\r\n            completed: false,\r\n            type: QuestionType.Checkboxes,\r\n            testCode: ``\r\n        },\r\n    ]","import React from 'react';\r\nimport { firebaseApp } from \"../../util/firebase\";\r\nimport * as firebase from 'firebase';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Icon from '@mdi/react';\r\nimport { mdiFacebookBox, mdiGoogle } from '@mdi/js';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\nimport './Resume.css'\r\n\r\ntype MyProps = RouteComponentProps & {\r\n    handleSaveState: (arg0: string) => void,\r\n    handleLoadState: (arg0: string) => void,\r\n};\r\n\r\nclass Resume extends React.Component<MyProps, {}> {\r\n\r\n    state = {\r\n        userId: ''\r\n    };\r\n\r\n    handleUserIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ userId: e.target.value });\r\n    };\r\n\r\n    handleSaveStateCheck = () => {\r\n        if (this.state.userId !== '') {\r\n            this.props.handleSaveState(this.state.userId)\r\n        }\r\n    };\r\n\r\n\r\n    handleFacebook = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        const provider = new firebase.auth.FacebookAuthProvider();\r\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\r\n            //console.log('Facebook login success');\r\n            if (result !== null && result.user !== null && result.user.uid !== null) {\r\n                this.props.handleLoadState(result.user.uid);\r\n                this.props.history.push('/');\r\n            }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    handleGoogle = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        firebaseApp.auth().signInWithPopup(provider).then((result) => {\r\n            //console.log('Google login success');\r\n            if (result !== null && result.user !== null && result.user.uid !== null) {\r\n                this.props.handleLoadState(result.user.uid);\r\n                this.props.history.push('/');\r\n\r\n            }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: 425 }}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                        <span style={{ color: 'white', textAlign: \"center\", fontWeight: 'bold' }}>\r\n                            Type in your past user ID to continue or login to save your progress\r\n                        </span>\r\n                    </Grid>\r\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                        <div className='w-100'>\r\n                            <label className=\"field a-field a-field_a3\">\r\n                                <input className=\"field__input a-field__input\" placeholder=\"e.g. sy95\"\r\n                                    onChange={this.handleUserIdChange}\r\n                                />\r\n                                <span className=\"a-field__label-wrap\">\r\n                                    <span className=\"a-field__label\">Enter User ID</span>\r\n                                </span>\r\n                            </label>\r\n                            <div className='d-flex'>\r\n                                <Button variant=\"outlined\" className='button-start' size='large'\r\n                                    onClick={this.handleSaveStateCheck}>\r\n                                    SAVE\r\n                                </Button>\r\n                                <Button variant=\"outlined\" className='button-start ml-auto' size='large'\r\n                                    onClick={() => this.props.handleLoadState(this.state.userId)}>\r\n                                    LOAD\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                        <Button variant=\"outlined\" onClick={this.handleFacebook} className='resume-auth' fullWidth>\r\n                            <span><Icon path={mdiFacebookBox} size={1} style={{ fill: 'white' }} /> Facebook</span>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} className='d-flex align-items-center justify-content-center'>\r\n                        <Button variant=\"outlined\" onClick={this.handleGoogle} className='resume-auth' fullWidth>\r\n                            <span><Icon path={mdiGoogle} size={1} style={{ fill: 'white' }} /> Google</span>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Resume);\r\n\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport {Route, Switch, withRouter} from 'react-router-dom';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport NavBar from \"./components/Navigation/NavBar\";\r\nimport SliderMenu from \"./components/Navigation/SliderMenu\";\r\nimport axios from \"axios\";\r\nimport { firebaseApp } from './util/firebase';\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\nimport QuestionInterface from './components/Question/QuestionInterface'\r\n\r\nimport './App.css';\r\nimport { questions } from \"./QuestionList\";\r\nimport Resume from \"./components/Resume/Resume\";\r\n\r\nexport interface BackendResponse {\r\n    data: {\r\n        htmlFeedback: string;\r\n        isComplete: boolean;\r\n        jsonFeedback: any;\r\n        textFeedback: string;\r\n    }\r\n};\r\n\r\nclass App extends Component<RouteComponentProps> {\r\n\r\n    state = {\r\n        openMenu: false,\r\n        question: 0, // idx of current question that user is on\r\n        returnedData: null,\r\n        questions: questions,\r\n        feedbackRating: 0, // feedback rating out of 5\r\n        isLoading: false,\r\n        showAlert: false,\r\n        showSnackBar: false,\r\n        loggedIn: false,\r\n        uid: '',\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        firebaseApp.auth().onAuthStateChanged(user => {\r\n            if (user) {\r\n                let currentuser = firebaseApp.auth().currentUser;\r\n                if (currentuser !== null) {\r\n                    this.setState({\r\n                        uid: currentuser.uid,\r\n                        username: currentuser.displayName,\r\n                        loggedIn: true,\r\n                    });\r\n                }\r\n            } else {\r\n                this.setState({ loggedIn: false })\r\n            }\r\n        });\r\n    }\r\n\r\n    handleMenu = (isOpen: boolean) => {\r\n        this.setState({ openMenu: isOpen })\r\n    };\r\n\r\n\r\n    handleClickQuestion = (i: number) => {\r\n        this.setState({\r\n            openMenu: false,\r\n            question: i,\r\n            showAlert: false,\r\n        });\r\n    };\r\n\r\n    handleMenuStateChange = (state: any) => {\r\n        this.setState({ openMenu: state.isOpen })\r\n    };\r\n\r\n    handleStart = () => {\r\n        this.props.history.push('/');\r\n        this.setState({ question: 1, openMenu: false, })\r\n    };\r\n\r\n    handleNextQuestion = () => {\r\n        this.setState({ question: this.state.question + 1, showAlert: false })\r\n    };\r\n\r\n    handlePrevQuestion = () => {\r\n        this.setState({ question: this.state.question - 1, showAlert: false })\r\n    };\r\n    handleAlertClose = () => {\r\n        this.setState({ showAlert: false })\r\n    };\r\n\r\n    handleStartOver = () => {\r\n        // TODO clear progress of app\r\n        this.setState({ question: 0 })\r\n    };\r\n\r\n    handleCheckAnswer = async () => {\r\n        //Add in fetch nonsense\r\n        this.setState({ isLoading: true });\r\n        let gatewayURL = \"https://cl8r4dbpqe.execute-api.us-east-1.amazonaws.com/Prod/\";\r\n        let questionURL = gatewayURL + `?question=${this.state.question}`;\r\n        let answer = {\r\n            \"userToken\": \"ABCDE\",\r\n            \"shown\": {\r\n                \"0\": this.state.questions[this.state.question].testCode\r\n            },\r\n            \"editable\": {\r\n                \"0\": this.state.questions[this.state.question].answer\r\n            },\r\n            \"hidden\": {\r\n                \"0\": `{\\n\"scripts\":{ \"test\":\"jest\" }\\n}`,\r\n            }\r\n        };\r\n        try {\r\n            const res: BackendResponse = await axios.post(questionURL, { ...answer }, {\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                }\r\n            });\r\n            console.log(res);\r\n            let questions = this.state.questions;\r\n            questions[this.state.question].completed = res.data.isComplete;\r\n            questions[this.state.question].feedbackText = res.data.htmlFeedback;\r\n            // questions[this.state.question].completed = true;\r\n            this.setState({ questions: questions });\r\n            if (this.state.loggedIn) {\r\n                this.handleSaveState(this.state.uid)\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            this.setState({ isLoading: false, showAlert: true });\r\n        }\r\n\r\n    };\r\n\r\n    handleSaveState = (name: string) => {\r\n        let data = {\r\n            questions: this.state.questions,\r\n            userId: name,\r\n            feedbackRating: this.state.feedbackRating,\r\n        };\r\n        firebaseApp.database().ref(`/userdata/${name}`).update(data)\r\n    };\r\n\r\n    handleLoadState = (name: string) => {\r\n        let db = firebaseApp.database().ref(`/userdata/${name}`);\r\n        db.once('value').then((snapshot) => {\r\n            const data = snapshot.val();\r\n            if (data !== null) {\r\n                let questions = Object.values(data.questions);\r\n                // console.log(questions)\r\n                this.setState({\r\n                    questions: questions,\r\n                    feedbackRating: data.feedbackRating,\r\n                    showSnackBar: true,\r\n                    openMenu: false\r\n                });\r\n                window.setTimeout(() => {\r\n                    this.setState({ showSnackBar: false })\r\n                }, 3000)\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    toggleAdmin = () => {\r\n        const pw = prompt('Please enter password');\r\n        if (pw === \"richu\") {\r\n            const questions = this.state.questions;\r\n            questions.forEach(q => {\r\n                q.completed = true;\r\n            });\r\n            this.props.history.push('/');\r\n            this.setState({ questions: questions })\r\n        }\r\n    };\r\n\r\n    toggleComplete = (isComplete: boolean) => {\r\n        let questions = this.state.questions;\r\n        questions[this.state.question].completed = isComplete;\r\n        this.setState({ questions: questions })\r\n    };\r\n\r\n    handleCloseSnackBar = () => {\r\n        this.setState({ showSnackBar: false })\r\n    };\r\n\r\n    SlideTransition = (props: any) => {\r\n        return <Slide {...props} direction=\"up\" />\r\n    };\r\n\r\n\r\n    render() {\r\n        const currQ = this.state.question;\r\n        return (\r\n            <div className=\"App\">\r\n                <SliderMenu open={this.state.openMenu} handleMenu={this.handleMenu}\r\n                    handleMenuStateChange={this.handleMenuStateChange}\r\n                    handleClickQuestion={this.handleClickQuestion}\r\n                    handleStart={this.handleStart}\r\n                    questions={this.state.questions}\r\n                    question={currQ}\r\n                    toggleAdmin={this.toggleAdmin}\r\n                    handleSaveState={this.handleSaveState}\r\n                    handleLoadState={this.handleLoadState}\r\n                />\r\n                <Container fluid className='container-main d-flex align-items-center justify-content-center flex-column'\r\n                    id='page-wrap'>\r\n                    <NavBar handleMenu={this.handleMenu} />\r\n                    {/* TODO remove Router. does not work with gh-pages. see https://create-react-app.dev/docs/deployment/#notes-on-client-side-routing */}\r\n\r\n                        <Switch>\r\n                            <Route exact path=\"/\"\r\n                                render={(props) => <QuestionInterface {...props} questions={this.state.questions}\r\n                                    question={currQ} handleStart={this.handleStart}\r\n                                    feedbackRating={this.state.feedbackRating}\r\n                                    handleStartOver={this.handleStartOver}\r\n                                    showAlert={this.state.showAlert}\r\n                                    handleNextQuestion={this.handleNextQuestion}\r\n                                    handlePrevQuestion={this.handlePrevQuestion}\r\n                                    handleCheckAnswer={this.handleCheckAnswer}\r\n                                    toggleComplete={this.toggleComplete}\r\n                                    isLoading={this.state.isLoading}\r\n                                    handleAlertClose={this.handleAlertClose}\r\n                                    handleClickQuestion={this.handleClickQuestion}\r\n\r\n                                />} />\r\n                            <Route exact path='/load' render={(props) => <Resume {...props}\r\n                                handleSaveState={this.handleSaveState}\r\n                                handleLoadState={this.handleLoadState}\r\n                            />} />\r\n                        </Switch>\r\n                    <Snackbar anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n                        open={this.state.showSnackBar}\r\n                        message={<span id=\"message-id\">Profile has been successfully loaded.</span>}\r\n                        action={\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={this.handleCloseSnackBar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        }\r\n                        TransitionComponent={this.SlideTransition}\r\n                    />\r\n                </Container>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Router >\r\n        <App/>\r\n    </Router>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}